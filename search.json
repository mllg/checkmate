[{"path":"https://mllg.github.io/checkmate/articles/checkmate.html","id":"intro","dir":"Articles","previous_headings":"","what":"Intro","title":"Checkmate","text":"motivational example, consider function calculate faculty natural number user may choose using either stirling approximation R’s factorial function (internally uses gamma function). Thus, two arguments, n method. Argument n must obviously positive natural number method must either \"stirling\" \"factorial\". version hoops need jump ensure simple requirements met: comparison, function using checkmate:","code":"fact <- function(n, method = \"stirling\") {   if (length(n) != 1)     stop(\"Argument 'n' must have length 1\")   if (!is.numeric(n))     stop(\"Argument 'n' must be numeric\")   if (is.na(n))     stop(\"Argument 'n' may not be NA\")   if (is.double(n)) {     if (is.nan(n))       stop(\"Argument 'n' may not be NaN\")     if (is.infinite(n))       stop(\"Argument 'n' must be finite\")     if (abs(n - round(n, 0)) > sqrt(.Machine$double.eps))       stop(\"Argument 'n' must be an integerish value\")     n <- as.integer(n)   }   if (n < 0)     stop(\"Argument 'n' must be >= 0\")   if (length(method) != 1)     stop(\"Argument 'method' must have length 1\")   if (!is.character(method) || !method %in% c(\"stirling\", \"factorial\"))     stop(\"Argument 'method' must be either 'stirling' or 'factorial'\")    if (method == \"factorial\")     factorial(n)   else     sqrt(2 * pi * n) * (n / exp(1))^n } fact <- function(n, method = \"stirling\") {   assertCount(n)   assertChoice(method, c(\"stirling\", \"factorial\"))    if (method == \"factorial\")     factorial(n)   else     sqrt(2 * pi * n) * (n / exp(1))^n }"},{"path":"https://mllg.github.io/checkmate/articles/checkmate.html","id":"function-overview","dir":"Articles","previous_headings":"","what":"Function overview","title":"Checkmate","text":"functions can split four functional groups, indicated prefix. prefixed assert, error thrown corresponding check fails. Otherwise, checked object returned invisibly. many different coding styles wild, R programmers stick either camelBack underscore_case. Therefore, checkmate offers functions flavors: assert_count just alias assertCount allows retain favorite style. family functions prefixed test always return check result logical value. , can use test_count testCount interchangeably. Functions starting check return error message string (TRUE otherwise) can used need control , e.g., want grep returned error message. expect last family functions intended used testthat package. performed checks logged testthat reporter. testthat uses underscore_case, extension functions come underscore style. functions categorized objects check package help page.","code":""},{"path":"https://mllg.github.io/checkmate/articles/checkmate.html","id":"in-case-you-miss-flexibility","dir":"Articles","previous_headings":"","what":"In case you miss flexibility","title":"Checkmate","text":"can use assert perform multiple checks throw assertion checks fail. example check x either class foo class bar: Note assert(, combine = \"\") assert(, combine = \"\") allow control logical combination specified checks, former default.","code":"f <- function(x) {   assert(     checkClass(x, \"foo\"),     checkClass(x, \"bar\")   ) }"},{"path":"https://mllg.github.io/checkmate/articles/checkmate.html","id":"argument-checks-for-the-lazy","dir":"Articles","previous_headings":"","what":"Argument Checks for the Lazy","title":"Checkmate","text":"following functions allow special syntax define argument checks using special format specification. E.g., qassert(x, \"+\") asserts x integer vector least one element missing values. simple domain specific language covers large variety frequent argument checks keystrokes. choose like best. qassert qassertr","code":""},{"path":"https://mllg.github.io/checkmate/articles/checkmate.html","id":"checkmate-as-testthat-extension","dir":"Articles","previous_headings":"","what":"checkmate as testthat extension","title":"Checkmate","text":"extend testthat, need IMPORT, DEPEND SUGGEST checkmate package. minimal example: Now set can use 30 new expectations tests.","code":"# file: tests/test-all.R library(testthat) library(checkmate) # for testthat extensions test_check(\"mypkg\") test_that(\"checkmate is a sweet extension for testthat\", {   x = runif(100)   expect_numeric(x, len = 100, any.missing = FALSE, lower = 0, upper = 1)   # or, equivalent, using the lazy style:   qexpect(x, \"N100[0,1]\") })"},{"path":"https://mllg.github.io/checkmate/articles/checkmate.html","id":"speed-considerations","dir":"Articles","previous_headings":"","what":"Speed considerations","title":"Checkmate","text":"comparison tediously writing checks R (c.f. factorial example beginning vignette), R sometimes tad faster performing checks scalars. seems odd first, checkmate mostly written C comparably fast. Yet many functions base package regular functions, primitives. primitives jump directly C code, checkmate use considerably slower .Call interface. result, possible write (simple) checks using base functions , circumstances, slightly outperform checkmate. However, go one step wrap custom check function convenient re-use , performance gain often lost (see benchmark 1). larger objects tide turned checkmate avoids many unnecessary intermediate variables. Also note quick/lazy implementation qassert/qtest/qexpect often tad faster two arguments evaluated (object rule) determine set checks perform. find (probably unrepresentative) benchmark. also note one executed inside knitr often cause outliers measured execution time. Better run benchmark get unbiased results.","code":""},{"path":"https://mllg.github.io/checkmate/articles/checkmate.html","id":"benchmark-1-assert-that-x-is-a-flag","dir":"Articles","previous_headings":"Speed considerations","what":"Benchmark 1: Assert that x is a flag","title":"Checkmate","text":"","code":"library(checkmate) library(ggplot2) library(microbenchmark)  x = TRUE r = function(x, na.ok = FALSE) { stopifnot(is.logical(x), length(x) == 1, na.ok || !is.na(x)) } cm = function(x) assertFlag(x) cmq = function(x) qassert(x, \"B1\") mb = microbenchmark(r(x), cm(x), cmq(x)) print(mb) ## Unit: microseconds ##    expr   min     lq     mean median    uq      max neval ##    r(x) 3.447 3.6065 27.07599  3.697 3.807 2323.389   100 ##   cm(x) 2.344 2.4995 12.94580  2.595 2.720  928.700   100 ##  cmq(x) 1.634 1.7135  9.35807  1.793 1.903  719.100   100 autoplot(mb)"},{"path":"https://mllg.github.io/checkmate/articles/checkmate.html","id":"benchmark-2-assert-that-x-is-a-numeric-of-length-1000-with-no-missing-nor-nan-values","dir":"Articles","previous_headings":"Speed considerations","what":"Benchmark 2: Assert that x is a numeric of length 1000 with no missing nor NaN values","title":"Checkmate","text":"","code":"x = runif(1000) r = function(x) stopifnot(is.numeric(x), length(x) == 1000, all(!is.na(x) & x >= 0 & x <= 1)) cm = function(x) assertNumeric(x, len = 1000, any.missing = FALSE, lower = 0, upper = 1) cmq = function(x) qassert(x, \"N1000[0,1]\") mb = microbenchmark(r(x), cm(x), cmq(x)) print(mb) ## Unit: microseconds ##    expr    min      lq     mean  median      uq      max neval ##    r(x) 12.403 12.8890 47.15517 13.2950 13.6710 3348.539   100 ##   cm(x)  5.430  5.6555 14.75520  5.8960  6.1360  819.327   100 ##  cmq(x)  6.872  7.0330 14.60879  7.1635  7.3235  732.785   100 autoplot(mb)"},{"path":"https://mllg.github.io/checkmate/articles/checkmate.html","id":"benchmark-3-assert-that-x-is-a-character-vector-with-no-missing-values-nor-empty-strings","dir":"Articles","previous_headings":"Speed considerations","what":"Benchmark 3: Assert that x is a character vector with no missing values nor empty strings","title":"Checkmate","text":"","code":"x = sample(letters, 10000, replace = TRUE) r = function(x) stopifnot(is.character(x), !any(is.na(x)), all(nchar(x) > 0)) cm = function(x) assertCharacter(x, any.missing = FALSE, min.chars = 1) cmq = function(x) qassert(x, \"S+[1,]\") mb = microbenchmark(r(x), cm(x), cmq(x)) print(mb) ## Unit: microseconds ##    expr     min       lq     mean   median       uq      max neval ##    r(x) 280.623 281.1690 311.5695 281.6400 285.4320 2664.344   100 ##   cm(x) 289.419 289.8755 303.8670 290.6620 291.8540 1103.265   100 ##  cmq(x) 125.183 125.3635 135.4466 125.6145 126.0855 1055.347   100 autoplot(mb)"},{"path":"https://mllg.github.io/checkmate/articles/checkmate.html","id":"benchmark-4-test-that-x-is-a-data-frame-with-no-missing-values","dir":"Articles","previous_headings":"Speed considerations","what":"Benchmark 4: Test that x is a data frame with no missing values","title":"Checkmate","text":"","code":"N = 10000 x = data.frame(a = runif(N), b = sample(letters[1:5], N, replace = TRUE), c = sample(c(FALSE, TRUE), N, replace = TRUE)) r = function(x) is.data.frame(x) && !any(sapply(x, function(x) any(is.na(x)))) cm = function(x) testDataFrame(x, any.missing = FALSE) cmq = function(x) qtest(x, \"D\") mb = microbenchmark(r(x), cm(x), cmq(x)) print(mb) ## Unit: microseconds ##    expr    min      lq     mean  median      uq      max neval ##    r(x) 66.114 66.9145 95.59066 67.5305 68.8740 2674.463   100 ##   cm(x) 35.166 35.6365 47.79327 36.2230 37.4245  956.602   100 ##  cmq(x) 28.804 28.9740 36.37325 29.3995 29.6100  713.039   100 autoplot(mb) # checkmate tries to stop as early as possible x$a[1] = NA mb = microbenchmark(r(x), cm(x), cmq(x)) print(mb) ## Unit: microseconds ##    expr    min      lq     mean  median      uq     max neval ##    r(x) 55.974 57.0715 61.03693 57.9030 64.3295 106.328   100 ##   cm(x)  5.089  5.4550  6.58323  6.3065  7.0985  29.445   100 ##  cmq(x)  1.093  1.2325  1.65303  1.4220  1.9590   6.762   100 autoplot(mb)"},{"path":"https://mllg.github.io/checkmate/articles/checkmate.html","id":"benchmark-5-assert-that-x-is-an-increasing-sequence-of-integers-with-no-missing-values","dir":"Articles","previous_headings":"Speed considerations","what":"Benchmark 5: Assert that x is an increasing sequence of integers with no missing values","title":"Checkmate","text":"","code":"N = 10000 x.altrep = seq_len(N) # this is an ALTREP in R version >= 3.5.0 x.sexp = c(x.altrep)  # this is a regular SEXP OTOH r = function(x) stopifnot(is.integer(x), !any(is.na(x)), !is.unsorted(x)) cm = function(x) assertInteger(x, any.missing = FALSE, sorted = TRUE) mb = microbenchmark(r(x.sexp), cm(x.sexp), r(x.altrep), cm(x.altrep)) print(mb) ## Unit: microseconds ##          expr    min      lq     mean  median      uq      max neval ##     r(x.sexp) 29.595 29.8505 51.72024 30.1315 30.4715 2162.530   100 ##    cm(x.sexp) 11.412 11.7170 22.44680 11.8975 12.1630 1040.128   100 ##   r(x.altrep) 38.752 39.0380 39.88193 39.2680 39.5835   58.068   100 ##  cm(x.altrep)  3.687  3.9420  5.09191  4.1380  4.3535   93.485   100 autoplot(mb)"},{"path":"https://mllg.github.io/checkmate/articles/checkmate.html","id":"extending-checkmate","dir":"Articles","previous_headings":"","what":"Extending checkmate","title":"Checkmate","text":"extend checkmate custom check* function written. example, check square matrix one can re-use parts checkmate extend check additional functionality: respective counterparts check-function can created using constructors makeAssertionFunction, makeTestFunction makeExpectationFunction: Note additional arguments .var.name, add, info label automatically joined function arguments custom check function. Also note define functions inside R package, constructors called build-time (thus, negative impact runtime).","code":"checkSquareMatrix = function(x, mode = NULL) {   # check functions must return TRUE on success   # and a custom error message otherwise   res = checkMatrix(x, mode = mode)   if (!isTRUE(res))     return(res)   if (nrow(x) != ncol(x))     return(\"Must be square\")   return(TRUE) }  # a quick test: X = matrix(1:9, nrow = 3) checkSquareMatrix(X) ## [1] TRUE checkSquareMatrix(X, mode = \"character\") ## [1] \"Must store characters\" checkSquareMatrix(X[1:2, ]) ## [1] \"Must be square\" # For assertions: assert_square_matrix = assertSquareMatrix = makeAssertionFunction(checkSquareMatrix) print(assertSquareMatrix) ## function (x, mode = NULL, .var.name = checkmate::vname(x), add = NULL)  ## { ##     if (missing(x))  ##         stop(sprintf(\"argument \\\"%s\\\" is missing, with no default\",  ##             .var.name)) ##     res = checkSquareMatrix(x, mode) ##     checkmate::makeAssertion(x, res, .var.name, add) ## } # For tests: test_square_matrix = testSquareMatrix = makeTestFunction(checkSquareMatrix) print(testSquareMatrix) ## function (x, mode = NULL)  ## { ##     isTRUE(checkSquareMatrix(x, mode)) ## } # For expectations: expect_square_matrix = makeExpectationFunction(checkSquareMatrix) print(expect_square_matrix) ## function (x, mode = NULL, info = NULL, label = vname(x))  ## { ##     if (missing(x))  ##         stop(sprintf(\"Argument '%s' is missing\", label)) ##     res = checkSquareMatrix(x, mode) ##     makeExpectation(x, res, info, label) ## }"},{"path":"https://mllg.github.io/checkmate/articles/checkmate.html","id":"calling-checkmate-from-cc","dir":"Articles","previous_headings":"","what":"Calling checkmate from C/C++","title":"Checkmate","text":"package registers two functions can used packages’ C/C++ code argument checks. counterparts qassert qtest. Due simplistic interface, perfectly suit requirements type checks C/C++. detailed background information register mechanism, see Exporting C Code section Hadley’s Book “R Packages” WRE. step--step guide get started: Add checkmate “Imports” “LinkingTo” sections DESCRIPTION file. Create stub C source file \"checkmate_stub.c\", see . Include provided header file <checkmate.h> compilation unit want use checkmate. File contents (2):","code":"SEXP qassert(SEXP x, const char *rule, const char *name); Rboolean qtest(SEXP x, const char *rule); #include <checkmate.h> #include <checkmate_stub.c>"},{"path":"https://mllg.github.io/checkmate/articles/checkmate.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Checkmate","text":"sake completeness, sessionInfo() benchmark (remember note knitr possibly biasing results).","code":"sessionInfo() ## R version 4.4.1 (2024-06-14) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.4 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] microbenchmark_1.4.10 ggplot2_3.5.1         checkmate_2.3.2       ##  ## loaded via a namespace (and not attached): ##  [1] gtable_0.3.5      jsonlite_1.8.8    highr_0.11        compiler_4.4.1    ##  [5] jquerylib_0.1.4   systemfonts_1.1.0 scales_1.3.0      textshaping_0.4.0 ##  [9] yaml_2.3.9        fastmap_1.2.0     R6_2.5.1          knitr_1.48        ## [13] htmlwidgets_1.6.4 backports_1.5.0   tibble_3.2.1      desc_1.4.3        ## [17] munsell_0.5.1     bslib_0.7.0       pillar_1.9.0      rlang_1.1.4       ## [21] utf8_1.2.4        cachem_1.1.0      xfun_0.46         fs_1.6.4          ## [25] sass_0.4.9        cli_3.6.3         pkgdown_2.1.0     withr_3.0.0       ## [29] magrittr_2.0.3    digest_0.6.36     grid_4.4.1        lifecycle_1.0.4   ## [33] vctrs_0.6.5       evaluate_0.24.0   glue_1.7.0        farver_2.1.2      ## [37] ragg_1.3.2        fansi_1.0.6       colorspace_2.1-0  rmarkdown_2.27    ## [41] tools_4.4.1       pkgconfig_2.0.3   htmltools_0.5.8.1"},{"path":"https://mllg.github.io/checkmate/articles/tinytest.html","id":"setup-tinytest","dir":"Articles","previous_headings":"","what":"Setup tinytest","title":"Setup tinytest","text":"Setting tinytest framework covered detail documentation tinytest. Quick summary: package root directory, call tinytest::setup_tinytest(\".\"). Edit/add R scripts unit tests directory inst/tinytest.","code":""},{"path":"https://mllg.github.io/checkmate/articles/tinytest.html","id":"setup-checkmate","dir":"Articles","previous_headings":"","what":"Setup checkmate","title":"Setup tinytest","text":"Edit DESCRIPTION add checkmate Suggests unless already listed Imports assertions. test file calls expectation checkmate, must include following lines beginning file: forget last line, expectations get reported correctly summary. Also note sourcing file includes using(\"checkmate\") sufficient. Check everything works R CMD check.","code":"library(\"tinytest\") library(\"checkmate\") using(\"checkmate\")"},{"path":"https://mllg.github.io/checkmate/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michel Lang. Maintainer, author. Bernd Bischl. Contributor. Dénes Tóth. Contributor.","code":""},{"path":"https://mllg.github.io/checkmate/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lang M (2017). “checkmate: Fast Argument Checks Defensive R Programming.” R Journal, 9(1), 437–445. doi:10.32614/RJ-2017-028.","code":"@Article{checkmate,   title = {{checkmate}: Fast Argument Checks for Defensive {R} Programming},   author = {Michel Lang},   journal = {The R Journal},   year = {2017},   doi = {10.32614/RJ-2017-028},   pages = {437--445},   volume = {9},   number = {1}, }"},{"path":"https://mllg.github.io/checkmate/index.html","id":"checkmate","dir":"","previous_headings":"","what":"Fast and Versatile Argument Checks","title":"Fast and Versatile Argument Checks","text":"Fast versatile argument checks R. Ever used R function produced --helpful error message, just discover minutes debugging simply passed wrong argument? Blaming laziness package author standard checks (dynamically typed language R) least partially unfair, R makes theses types checks cumbersome annoying. Well, ’s past. Enter checkmate. Virtually every standard type user error passing arguments function can caught simple, readable line produces informative error message case. substantial part package written C minimize worries execution time overhead. Furthermore, package provides 30 expectations extend popular testthat package unit tests.","code":""},{"path":"https://mllg.github.io/checkmate/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fast and Versatile Argument Checks","text":"stable release, just install latest version CRAN: {R} install.packages(\"checkmate\") development version, use devtools: {R} devtools::install_github(\"mllg/checkmate\")","code":""},{"path":"https://mllg.github.io/checkmate/index.html","id":"resources","dir":"","previous_headings":"","what":"Resources","title":"Fast and Versatile Argument Checks","text":"R Journal Paper NEWS Documentation/Vignettes Grouped function reference","code":""},{"path":"https://mllg.github.io/checkmate/reference/AssertCollection.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect multiple assertions — AssertCollection","title":"Collect multiple assertions — AssertCollection","text":"function makeAssertCollection() returns simple stack-like closure can pass functions assert*-family. messages get collected can reported reportAssertions(). Alternatively, can easily write report function customize output report function certain degree. See example push custom messages retrieve stored messages.","code":""},{"path":"https://mllg.github.io/checkmate/reference/AssertCollection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect multiple assertions — AssertCollection","text":"","code":"makeAssertCollection()  reportAssertions(collection)"},{"path":"https://mllg.github.io/checkmate/reference/AssertCollection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collect multiple assertions — AssertCollection","text":"collection [AssertCollection] Object type “AssertCollection” (constructed via makeAssertCollection).","code":""},{"path":"https://mllg.github.io/checkmate/reference/AssertCollection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collect multiple assertions — AssertCollection","text":"makeAssertCollection() returns object class “AssertCollection”  reportCollection returns invisibly TRUE error thrown (.e., message  collected).","code":""},{"path":"https://mllg.github.io/checkmate/reference/AssertCollection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collect multiple assertions — AssertCollection","text":"","code":"x = \"a\" coll = makeAssertCollection()  print(coll$isEmpty()) #> [1] TRUE assertNumeric(x, add = coll) coll$isEmpty() #> [1] FALSE coll$push(\"Custom error message\") coll$getMessages() #> [1] \"Variable 'x': Must be of type 'numeric', not 'character'.\" #> [2] \"Custom error message\"                                      if (FALSE) { # \\dontrun{   reportAssertions(coll) } # }"},{"path":"https://mllg.github.io/checkmate/reference/anyInfinite.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object contains infinite values — anyInfinite","title":"Check if an object contains infinite values — anyInfinite","text":"Supported atomic types (see .atomic), lists data frames.","code":""},{"path":"https://mllg.github.io/checkmate/reference/anyInfinite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object contains infinite values — anyInfinite","text":"","code":"anyInfinite(x)"},{"path":"https://mllg.github.io/checkmate/reference/anyInfinite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object contains infinite values — anyInfinite","text":"x [] Object check.","code":""},{"path":"https://mllg.github.io/checkmate/reference/anyInfinite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object contains infinite values — anyInfinite","text":"[logical(1)] Returns TRUE element -Inf Inf.","code":""},{"path":"https://mllg.github.io/checkmate/reference/anyInfinite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an object contains infinite values — anyInfinite","text":"","code":"anyInfinite(1:10) #> [1] FALSE anyInfinite(c(1:10, Inf)) #> [1] TRUE iris[3, 3] = Inf anyInfinite(iris) #> [1] TRUE"},{"path":"https://mllg.github.io/checkmate/reference/anyMissing.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object contains missing values — allMissing","title":"Check if an object contains missing values — allMissing","text":"anyMissing checks presence least one missing value, allMissing checks presence least one non-missing value. Supported atomic types (see .atomic), lists data frames. Missingness defined NA NaN atomic types data frame columns, NULL defined missing lists.allMissing applied data.frame returns TRUE least one column non-missing values. want perform less frequent check least single non-missing observation present data.frame, use (sapply(df, allMissing)) instead.","code":""},{"path":"https://mllg.github.io/checkmate/reference/anyMissing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object contains missing values — allMissing","text":"","code":"allMissing(x)  anyMissing(x)"},{"path":"https://mllg.github.io/checkmate/reference/anyMissing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object contains missing values — allMissing","text":"x [] Object check.","code":""},{"path":"https://mllg.github.io/checkmate/reference/anyMissing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object contains missing values — allMissing","text":"[logical(1)] Returns TRUE (anyMissing) (allMissing)  elements x missing (see details), FALSE otherwise.","code":""},{"path":"https://mllg.github.io/checkmate/reference/anyMissing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an object contains missing values — allMissing","text":"","code":"allMissing(1:2) #> [1] FALSE allMissing(c(1, NA)) #> [1] FALSE allMissing(c(NA, NA)) #> [1] TRUE x = data.frame(a = 1:2, b = NA) # Note how allMissing combines the results for data frames: allMissing(x) #> [1] TRUE all(sapply(x, allMissing)) #> [1] FALSE anyMissing(c(1, 1)) #> [1] FALSE anyMissing(c(1, NA)) #> [1] TRUE anyMissing(list(1, NULL)) #> [1] TRUE  x = iris x[, \"Species\"] = NA anyMissing(x) #> [1] TRUE allMissing(x) #> [1] TRUE"},{"path":"https://mllg.github.io/checkmate/reference/anyNaN.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object contains NaN values — anyNaN","title":"Check if an object contains NaN values — anyNaN","text":"Supported atomic types (see .atomic), lists data frames.","code":""},{"path":"https://mllg.github.io/checkmate/reference/anyNaN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object contains NaN values — anyNaN","text":"","code":"anyNaN(x)"},{"path":"https://mllg.github.io/checkmate/reference/anyNaN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object contains NaN values — anyNaN","text":"x [] Object check.","code":""},{"path":"https://mllg.github.io/checkmate/reference/anyNaN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object contains NaN values — anyNaN","text":"[logical(1)] Returns TRUE element NaN.","code":""},{"path":"https://mllg.github.io/checkmate/reference/anyNaN.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an object contains NaN values — anyNaN","text":"","code":"anyNaN(1:10) #> [1] FALSE anyNaN(c(1:10, NaN)) #> [1] TRUE iris[3, 3] = NaN anyNaN(iris) #> [1] TRUE"},{"path":"https://mllg.github.io/checkmate/reference/asInteger.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an argument to an integer — asInteger","title":"Convert an argument to an integer — asInteger","text":"asInteger intended used vectors asInt specialization scalar integers asCount scalar non-negative integers. Convertible () atomic vectors elements NA (b) double vectors elements within tol range integer. Note functions may deprecated future. Instead, advised use assertCount, assertInt assertIntegerish argument coerce set TRUE instead.","code":""},{"path":"https://mllg.github.io/checkmate/reference/asInteger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an argument to an integer — asInteger","text":"","code":"asInteger(   x,   tol = sqrt(.Machine$double.eps),   lower = -Inf,   upper = Inf,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   .var.name = vname(x) )  asCount(   x,   na.ok = FALSE,   positive = FALSE,   tol = sqrt(.Machine$double.eps),   .var.name = vname(x) )  asInt(   x,   na.ok = FALSE,   lower = -Inf,   upper = Inf,   tol = sqrt(.Machine$double.eps),   .var.name = vname(x) )"},{"path":"https://mllg.github.io/checkmate/reference/asInteger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an argument to an integer — asInteger","text":"x [] Object convert. tol [double(1)] Numerical tolerance used check whether double complex can converted. Default sqrt(.Machine$double.eps). lower [numeric(1)] Lower value elements x must greater equal . upper [numeric(1)] Upper value elements x must lower equal . .missing [logical(1)] vectors missing values allowed? Default TRUE. .missing [logical(1)] vectors non-missing values allowed? Default TRUE. Note empty vectors non-missing values. len [integer(1)] Exact expected length x. min.len [integer(1)] Minimal length x. max.len [integer(1)] Maximal length x. unique [logical(1)] Must values unique? Default FALSE. sorted [logical(1)] Elements must sorted ascending order. Missing values ignored. names [character(1)] Check names. See checkNamed possible values. Default “” performs check . Note can use checkSubset check specific set names. .var.name [character(1)] Name checked object print error messages. Defaults heuristic implemented vname. na.ok [logical(1)] missing values allowed? Default FALSE. positive [logical(1)] Must x positive (>= 1)? Default FALSE.","code":""},{"path":"https://mllg.github.io/checkmate/reference/asInteger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an argument to an integer — asInteger","text":"Converted x.","code":""},{"path":"https://mllg.github.io/checkmate/reference/asInteger.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert an argument to an integer — asInteger","text":"function distinguish NA, NA_integer_, NA_real_, NA_complex_ NA_character_ NaN.","code":""},{"path":"https://mllg.github.io/checkmate/reference/asInteger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an argument to an integer — asInteger","text":"","code":"asInteger(c(1, 2, 3)) #> [1] 1 2 3 asCount(1) #> [1] 1 asInt(1) #> [1] 1"},{"path":"https://mllg.github.io/checkmate/reference/assert.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine multiple checks into one assertion — assert","title":"Combine multiple checks into one assertion — assert","text":"can call function arbitrary number check* functions, .e. functions provided package functions return TRUE success error message character(1) otherwise. resulting assertion successful, combine “” (default) least one check evaluates TRUE combine “” checks evaluate TRUE. Otherwise, assert throws informative error message.","code":""},{"path":"https://mllg.github.io/checkmate/reference/assert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine multiple checks into one assertion — assert","text":"","code":"assert(..., combine = \"or\", .var.name = NULL, add = NULL)"},{"path":"https://mllg.github.io/checkmate/reference/assert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine multiple checks into one assertion — assert","text":"... [] List calls check functions. combine [character(1)] “” “” combine check functions , respectively. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection.","code":""},{"path":"https://mllg.github.io/checkmate/reference/assert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine multiple checks into one assertion — assert","text":"Throws error (pushes error message   AssertCollection add NULL)   checks fail invisibly returns TRUE otherwise.","code":""},{"path":"https://mllg.github.io/checkmate/reference/assert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine multiple checks into one assertion — assert","text":"","code":"x = 1:10 assert(checkNull(x), checkInteger(x, any.missing = FALSE)) collection <- makeAssertCollection() assert(checkChoice(x, c(\"a\", \"b\")), checkDataFrame(x), add = collection) collection$getMessages() #> [1] \"Variable 'x': One of the following must apply:\\n * checkChoice(x): Must be element of set {'a','b'}, but is not atomic\\n * scalar\\n * checkDataFrame(x): Must be of type 'data.frame', not 'integer'.\""},{"path":"https://mllg.github.io/checkmate/reference/checkAccess.html","id":null,"dir":"Reference","previous_headings":"","what":"Check file system access rights — checkAccess","title":"Check file system access rights — checkAccess","text":"Check file system access rights","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkAccess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check file system access rights — checkAccess","text":"","code":"checkAccess(x, access = \"\")  check_access(x, access = \"\")  assertAccess(x, access = \"\", .var.name = vname(x), add = NULL)  assert_access(x, access = \"\", .var.name = vname(x), add = NULL)  testAccess(x, access = \"\")  test_access(x, access = \"\")  expect_access(x, access = \"\", info = NULL, label = vname(x))"},{"path":"https://mllg.github.io/checkmate/reference/checkAccess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check file system access rights — checkAccess","text":"x [] Object check. access [character(1)] Single string containing possible characters ‘r’, ‘w’ ‘x’ force check read, write execute access rights, respectively. Write executable rights checked Windows. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkAccess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check file system access rights — checkAccess","text":"Depending function prefix:  check successful, functions  assertAccess/assert_access return  x invisibly, whereas  checkAccess/check_access  testAccess/test_access return  TRUE.  check successful,  assertAccess/assert_access  throws error message,  testAccess/test_access  returns FALSE,  checkAccess/check_access  return string error message.  function expect_access always returns  expectation.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkAccess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check file system access rights — checkAccess","text":"","code":"# Is R's home directory readable? testAccess(R.home(), \"r\") #> [1] TRUE  # Is R's home directory writeable? testAccess(R.home(), \"w\") #> [1] FALSE"},{"path":"https://mllg.github.io/checkmate/reference/checkArray.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is an array — checkArray","title":"Check if an argument is an array — checkArray","text":"Check argument array","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkArray.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is an array — checkArray","text":"","code":"checkArray(   x,   mode = NULL,   any.missing = TRUE,   d = NULL,   min.d = NULL,   max.d = NULL,   null.ok = FALSE )  check_array(   x,   mode = NULL,   any.missing = TRUE,   d = NULL,   min.d = NULL,   max.d = NULL,   null.ok = FALSE )  assertArray(   x,   mode = NULL,   any.missing = TRUE,   d = NULL,   min.d = NULL,   max.d = NULL,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  assert_array(   x,   mode = NULL,   any.missing = TRUE,   d = NULL,   min.d = NULL,   max.d = NULL,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  testArray(   x,   mode = NULL,   any.missing = TRUE,   d = NULL,   min.d = NULL,   max.d = NULL,   null.ok = FALSE )  test_array(   x,   mode = NULL,   any.missing = TRUE,   d = NULL,   min.d = NULL,   max.d = NULL,   null.ok = FALSE )  expect_array(   x,   mode = NULL,   any.missing = TRUE,   d = NULL,   min.d = NULL,   max.d = NULL,   null.ok = FALSE,   info = NULL,   label = vname(x) )"},{"path":"https://mllg.github.io/checkmate/reference/checkArray.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is an array — checkArray","text":"x [] Object check. mode [character(1)] Storage mode array. Arrays can hold vectors, .e. “logical”, “integer”, “integerish”, “double”, “numeric”, “complex”, “character” “list”. can also specify “atomic” explicitly prohibit lists. Default NULL (check). values x missing, check skipped. .missing [logical(1)] missing values allowed? Default TRUE. d [integer(1)] Exact number dimensions array x. Default NULL (check). min.d [integer(1)] Minimum number dimensions array x. Default NULL (check). max.d [integer(1)] Maximum number dimensions array x. Default NULL (check). null.ok [logical(1)] set TRUE, x may also NULL. case type check x performed, additional checks disabled. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkArray.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is an array — checkArray","text":"Depending function prefix:  check successful, functions  assertArray/assert_array return  x invisibly, whereas  checkArray/check_array  testArray/test_array return  TRUE.  check successful,  assertArray/assert_array  throws error message,  testArray/test_array  returns FALSE,  checkArray/check_array  return string error message.  function expect_array always returns  expectation.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkArray.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is an array — checkArray","text":"","code":"checkArray(array(1:27, dim = c(3, 3, 3)), d = 3) #> [1] TRUE"},{"path":"https://mllg.github.io/checkmate/reference/checkAtomic.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that an argument is an atomic vector — checkAtomic","title":"Check that an argument is an atomic vector — checkAtomic","text":"definition “atomic”, see .atomic. Note `NULL` recognized valid atomic value, R versions version 4.3.x. details, see https://stat.ethz.ch/pipermail/r-devel/2023-September/082892.html.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkAtomic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that an argument is an atomic vector — checkAtomic","text":"","code":"checkAtomic(   x,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL )  check_atomic(   x,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL )  assertAtomic(   x,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL,   .var.name = vname(x),   add = NULL )  assert_atomic(   x,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL,   .var.name = vname(x),   add = NULL )  testAtomic(   x,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL )  test_atomic(   x,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL )  expect_atomic(   x,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL,   info = NULL,   label = vname(x) )"},{"path":"https://mllg.github.io/checkmate/reference/checkAtomic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that an argument is an atomic vector — checkAtomic","text":"x [] Object check. .missing [logical(1)] vectors missing values allowed? Default TRUE. .missing [logical(1)] vectors non-missing values allowed? Default TRUE. Note empty vectors non-missing values. len [integer(1)] Exact expected length x. min.len [integer(1)] Minimal length x. max.len [integer(1)] Maximal length x. unique [logical(1)] Must values unique? Default FALSE. names [character(1)] Check names. See checkNamed possible values. Default “” performs check . Note can use checkSubset check specific set names. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkAtomic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that an argument is an atomic vector — checkAtomic","text":"Depending function prefix:  check successful, functions  assertAtomic/assert_atomic return  x invisibly, whereas  checkAtomic/check_atomic  testAtomic/test_atomic return  TRUE.  check successful,  assertAtomic/assert_atomic  throws error message,  testAtomic/test_atomic  returns FALSE,  checkAtomic/check_atomic  return string error message.  function expect_atomic always returns  expectation.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkAtomic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that an argument is an atomic vector — checkAtomic","text":"","code":"testAtomic(letters, min.len = 1L, any.missing = FALSE) #> [1] TRUE"},{"path":"https://mllg.github.io/checkmate/reference/checkAtomicVector.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that an argument is an atomic vector — checkAtomicVector","title":"Check that an argument is an atomic vector — checkAtomicVector","text":"atomic vector defined slightly different specifications .atomic .vector: atomic vector either logical, integer, numeric, complex, character raw can attributes except dimension attribute (like matrices). .e., factor atomic vector, matrix NULL . short, basically equivalent .atomic(x) && !.null(x) && .null(dim(x)).","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkAtomicVector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that an argument is an atomic vector — checkAtomicVector","text":"","code":"checkAtomicVector(   x,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL )  check_atomic_vector(   x,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL )  assertAtomicVector(   x,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL,   .var.name = vname(x),   add = NULL )  assert_atomic_vector(   x,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL,   .var.name = vname(x),   add = NULL )  testAtomicVector(   x,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL )  test_atomic_vector(   x,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL )  expect_atomic_vector(   x,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL,   info = NULL,   label = vname(x) )"},{"path":"https://mllg.github.io/checkmate/reference/checkAtomicVector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that an argument is an atomic vector — checkAtomicVector","text":"x [] Object check. .missing [logical(1)] vectors missing values allowed? Default TRUE. .missing [logical(1)] vectors missing values allowed? Default TRUE. len [integer(1)] Exact expected length x. min.len [integer(1)] Minimal length x. max.len [integer(1)] Maximal length x. unique [logical(1)] Must values unique? Default FALSE. names [character(1)] Check names. See checkNamed possible values. Default “” performs check . .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkAtomicVector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that an argument is an atomic vector — checkAtomicVector","text":"Depending function prefix:  check successful, functions  assertAtomicVector/assert_atomic_vector return  x invisibly, whereas  checkAtomicVector/check_atomic_vector  testAtomicVector/test_atomic_vector return  TRUE.  check successful,  assertAtomicVector/assert_atomic_vector  throws error message,  testAtomicVector/test_atomic_vector  returns FALSE,  checkAtomicVector/check_atomic_vector  return string error message.  function expect_atomic_vector always returns  expectation.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkAtomicVector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that an argument is an atomic vector — checkAtomicVector","text":"","code":"testAtomicVector(letters, min.len = 1L, any.missing = FALSE) #> [1] TRUE"},{"path":"https://mllg.github.io/checkmate/reference/checkCharacter.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is a vector of type character — checkCharacter","title":"Check if an argument is a vector of type character — checkCharacter","text":"check scalar strings, see checkString.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkCharacter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is a vector of type character — checkCharacter","text":"","code":"checkCharacter(   x,   n.chars = NULL,   min.chars = NULL,   max.chars = NULL,   pattern = NULL,   fixed = NULL,   ignore.case = FALSE,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE )  check_character(   x,   n.chars = NULL,   min.chars = NULL,   max.chars = NULL,   pattern = NULL,   fixed = NULL,   ignore.case = FALSE,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE )  assertCharacter(   x,   n.chars = NULL,   min.chars = NULL,   max.chars = NULL,   pattern = NULL,   fixed = NULL,   ignore.case = FALSE,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  assert_character(   x,   n.chars = NULL,   min.chars = NULL,   max.chars = NULL,   pattern = NULL,   fixed = NULL,   ignore.case = FALSE,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  testCharacter(   x,   n.chars = NULL,   min.chars = NULL,   max.chars = NULL,   pattern = NULL,   fixed = NULL,   ignore.case = FALSE,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE )  test_character(   x,   n.chars = NULL,   min.chars = NULL,   max.chars = NULL,   pattern = NULL,   fixed = NULL,   ignore.case = FALSE,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE )  expect_character(   x,   n.chars = NULL,   min.chars = NULL,   max.chars = NULL,   pattern = NULL,   fixed = NULL,   ignore.case = FALSE,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE,   info = NULL,   label = vname(x) )"},{"path":"https://mllg.github.io/checkmate/reference/checkCharacter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is a vector of type character — checkCharacter","text":"x [] Object check. n.chars [integer(1)] Exact number characters element x. min.chars [integer(1)] Minimum number characters element x. max.chars [integer(1)] Maximum number characters element x. pattern [character(1L)] Regular expression used grepl. non-missing elements x must comply pattern. fixed [character(1)] Substring detect x. used pattern grepl option fixed set TRUE. non-missing elements x must contain substring. ignore.case [logical(1)] See grepl. Default FALSE. .missing [logical(1)] vectors missing values allowed? Default TRUE. .missing [logical(1)] vectors non-missing values allowed? Default TRUE. Note empty vectors non-missing values. len [integer(1)] Exact expected length x. min.len [integer(1)] Minimal length x. max.len [integer(1)] Maximal length x. unique [logical(1)] Must values unique? Default FALSE. sorted [logical(1)] Elements must sorted ascending order. Missing values ignored. names [character(1)] Check names. See checkNamed possible values. Default “” performs check . Note can use checkSubset check specific set names. typed.missing [logical(1)] set FALSE (default), types missing values (NA, NA_integer_, NA_real_, NA_character_ NA_character_) well empty vectors allowed type-checking atomic input. Set TRUE enable strict type checking. null.ok [logical(1)] set TRUE, x may also NULL. case type check x performed, additional checks disabled. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkCharacter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is a vector of type character — checkCharacter","text":"Depending function prefix:  check successful, functions  assertCharacter/assert_character return  x invisibly, whereas  checkCharacter/check_character  testCharacter/test_character return  TRUE.  check successful,  assertCharacter/assert_character  throws error message,  testCharacter/test_character  returns FALSE,  checkCharacter/check_character  return string error message.  function expect_character always returns  expectation.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkCharacter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if an argument is a vector of type character — checkCharacter","text":"function distinguish NA, NA_integer_, NA_real_, NA_complex_ NA_character_ NaN.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkCharacter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is a vector of type character — checkCharacter","text":"","code":"testCharacter(letters, min.len = 1, any.missing = FALSE) #> [1] TRUE testCharacter(letters, min.chars = 2) #> [1] FALSE testCharacter(\"example\", pattern = \"xa\") #> [1] TRUE"},{"path":"https://mllg.github.io/checkmate/reference/checkChoice.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is an element of a given set — checkChoice","title":"Check if an object is an element of a given set — checkChoice","text":"Check object element given set","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkChoice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is an element of a given set — checkChoice","text":"","code":"checkChoice(x, choices, null.ok = FALSE, fmatch = FALSE)  check_choice(x, choices, null.ok = FALSE, fmatch = FALSE)  assertChoice(   x,   choices,   null.ok = FALSE,   fmatch = FALSE,   .var.name = vname(x),   add = NULL )  assert_choice(   x,   choices,   null.ok = FALSE,   fmatch = FALSE,   .var.name = vname(x),   add = NULL )  testChoice(x, choices, null.ok = FALSE, fmatch = FALSE)  test_choice(x, choices, null.ok = FALSE, fmatch = FALSE)  expect_choice(   x,   choices,   null.ok = FALSE,   fmatch = FALSE,   info = NULL,   label = vname(x) )"},{"path":"https://mllg.github.io/checkmate/reference/checkChoice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is an element of a given set — checkChoice","text":"x [] Object check. choices [atomic] Set possible values. null.ok [logical(1)] set TRUE, x may also NULL. case type check x performed, additional checks disabled. fmatch [logical(1)] Use set operations implemented fmatch package fastmatch. fastmatch installed, silently falls back match. fmatch modifies y reference: hash table added attribute used subsequent calls. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkChoice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is an element of a given set — checkChoice","text":"Depending function prefix:  check successful, functions  assertChoice/assert_choice return  x invisibly, whereas  checkChoice/check_choice  testChoice/test_choice return  TRUE.  check successful,  assertChoice/assert_choice  throws error message,  testChoice/test_choice  returns FALSE,  checkChoice/check_choice  return string error message.  function expect_choice always returns  expectation.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkChoice.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Check if an object is an element of a given set — checkChoice","text":"object x must type set w.r.t. typeof. Integers doubles treated numeric.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkChoice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an object is an element of a given set — checkChoice","text":"","code":"testChoice(\"x\", letters) #> [1] TRUE  # x is not converted before the comparison (except for numerics) testChoice(factor(\"a\"), \"a\") #> [1] FALSE testChoice(1, \"1\") #> [1] FALSE testChoice(1, as.integer(1)) #> [1] TRUE"},{"path":"https://mllg.github.io/checkmate/reference/checkClass.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the class membership of an argument — checkClass","title":"Check the class membership of an argument — checkClass","text":"Check class membership argument","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkClass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the class membership of an argument — checkClass","text":"","code":"checkClass(x, classes, ordered = FALSE, null.ok = FALSE)  check_class(x, classes, ordered = FALSE, null.ok = FALSE)  assertClass(   x,   classes,   ordered = FALSE,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  assert_class(   x,   classes,   ordered = FALSE,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  testClass(x, classes, ordered = FALSE, null.ok = FALSE)  test_class(x, classes, ordered = FALSE, null.ok = FALSE)  expect_class(   x,   classes,   ordered = FALSE,   null.ok = FALSE,   info = NULL,   label = vname(x) )"},{"path":"https://mllg.github.io/checkmate/reference/checkClass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the class membership of an argument — checkClass","text":"x [] Object check. classes [character] Class names check inheritance inherits. x must inherit specified classes. ordered [logical(1)] Expect x specialized provided order. Default FALSE. null.ok [logical(1)] set TRUE, x may also NULL. case type check x performed, additional checks disabled. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkClass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the class membership of an argument — checkClass","text":"Depending function prefix:  check successful, functions  assertClass/assert_class return  x invisibly, whereas  checkClass/check_class  testClass/test_class return  TRUE.  check successful,  assertClass/assert_class  throws error message,  testClass/test_class  returns FALSE,  checkClass/check_class  return string error message.  function expect_class always returns  expectation.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkClass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the class membership of an argument — checkClass","text":"","code":"# Create an object with classes \"foo\" and \"bar\" x = 1 class(x) = c(\"foo\", \"bar\")  # is x of class \"foo\"? testClass(x, \"foo\") #> [1] TRUE  # is x of class \"foo\" and \"bar\"? testClass(x, c(\"foo\", \"bar\")) #> [1] TRUE  # is x of class \"foo\" or \"bar\"? if (FALSE) { # \\dontrun{ assert(   checkClass(x, \"foo\"),   checkClass(x, \"bar\") ) } # } # is x most specialized as \"bar\"? testClass(x, \"bar\", ordered = TRUE) #> [1] FALSE"},{"path":"https://mllg.github.io/checkmate/reference/checkComplex.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is a vector of type complex — checkComplex","title":"Check if an argument is a vector of type complex — checkComplex","text":"Check argument vector type complex","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkComplex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is a vector of type complex — checkComplex","text":"","code":"checkComplex(   x,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE )  check_complex(   x,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE )  assertComplex(   x,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  assert_complex(   x,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  testComplex(   x,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE )  test_complex(   x,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE )  expect_complex(   x,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE,   info = NULL,   label = vname(x) )"},{"path":"https://mllg.github.io/checkmate/reference/checkComplex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is a vector of type complex — checkComplex","text":"x [] Object check. .missing [logical(1)] vectors missing values allowed? Default TRUE. .missing [logical(1)] vectors non-missing values allowed? Default TRUE. Note empty vectors non-missing values. len [integer(1)] Exact expected length x. min.len [integer(1)] Minimal length x. max.len [integer(1)] Maximal length x. unique [logical(1)] Must values unique? Default FALSE. names [character(1)] Check names. See checkNamed possible values. Default “” performs check . Note can use checkSubset check specific set names. typed.missing [logical(1)] set FALSE (default), types missing values (NA, NA_integer_, NA_real_, NA_character_ NA_character_) well empty vectors allowed type-checking atomic input. Set TRUE enable strict type checking. null.ok [logical(1)] set TRUE, x may also NULL. case type check x performed, additional checks disabled. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkComplex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is a vector of type complex — checkComplex","text":"Depending function prefix:  check successful, functions  assertComplex/assert_complex return  x invisibly, whereas  checkComplex/check_complex  testComplex/test_complex return  TRUE.  check successful,  assertComplex/assert_complex  throws error message,  testComplex/test_complex  returns FALSE,  checkComplex/check_complex  return string error message.  function expect_complex always returns  expectation.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkComplex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if an argument is a vector of type complex — checkComplex","text":"function distinguish NA, NA_integer_, NA_real_, NA_complex_ NA_character_ NaN.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkComplex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is a vector of type complex — checkComplex","text":"","code":"testComplex(1) #> [1] FALSE testComplex(1+1i) #> [1] TRUE"},{"path":"https://mllg.github.io/checkmate/reference/checkCount.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is a count — checkCount","title":"Check if an argument is a count — checkCount","text":"count defined non-negative integerish value.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkCount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is a count — checkCount","text":"","code":"checkCount(   x,   na.ok = FALSE,   positive = FALSE,   tol = sqrt(.Machine$double.eps),   null.ok = FALSE )  check_count(   x,   na.ok = FALSE,   positive = FALSE,   tol = sqrt(.Machine$double.eps),   null.ok = FALSE )  assertCount(   x,   na.ok = FALSE,   positive = FALSE,   tol = sqrt(.Machine$double.eps),   null.ok = FALSE,   coerce = FALSE,   .var.name = vname(x),   add = NULL )  assert_count(   x,   na.ok = FALSE,   positive = FALSE,   tol = sqrt(.Machine$double.eps),   null.ok = FALSE,   coerce = FALSE,   .var.name = vname(x),   add = NULL )  testCount(   x,   na.ok = FALSE,   positive = FALSE,   tol = sqrt(.Machine$double.eps),   null.ok = FALSE )  test_count(   x,   na.ok = FALSE,   positive = FALSE,   tol = sqrt(.Machine$double.eps),   null.ok = FALSE )  expect_count(   x,   na.ok = FALSE,   positive = FALSE,   tol = sqrt(.Machine$double.eps),   null.ok = FALSE,   info = NULL,   label = vname(x) )"},{"path":"https://mllg.github.io/checkmate/reference/checkCount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is a count — checkCount","text":"x [] Object check. na.ok [logical(1)] missing values allowed? Default FALSE. positive [logical(1)] Must x positive (>= 1)? Default FALSE, allowing 0. tol [double(1)] Numerical tolerance used check whether double complex can converted. Default sqrt(.Machine$double.eps). null.ok [logical(1)] set TRUE, x may also NULL. case type check x performed, additional checks disabled. coerce [logical(1)] TRUE, input x returned integer successful assertion. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkCount.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is a count — checkCount","text":"Depending function prefix:  check successful, functions  assertCount/assert_count return  x invisibly, whereas  checkCount/check_count  testCount/test_count return  TRUE.  check successful,  assertCount/assert_count  throws error message,  testCount/test_count  returns FALSE,  checkCount/check_count  return string error message.  function expect_count always returns  expectation.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkCount.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if an argument is a count — checkCount","text":"function distinguish NA, NA_integer_, NA_real_, NA_complex_ NA_character_ NaN.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkCount.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Check if an argument is a count — checkCount","text":"perform assertion convert integer, use asCount. assertCount convert numerics integer.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkCount.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is a count — checkCount","text":"","code":"testCount(1) #> [1] TRUE testCount(-1) #> [1] FALSE"},{"path":"https://mllg.github.io/checkmate/reference/checkDataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is a data frame — checkDataFrame","title":"Check if an argument is a data frame — checkDataFrame","text":"Check argument data frame","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkDataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is a data frame — checkDataFrame","text":"","code":"checkDataFrame(   x,   types = character(0L),   any.missing = TRUE,   all.missing = TRUE,   min.rows = NULL,   max.rows = NULL,   min.cols = NULL,   max.cols = NULL,   nrows = NULL,   ncols = NULL,   row.names = NULL,   col.names = NULL,   null.ok = FALSE )  check_data_frame(   x,   types = character(0L),   any.missing = TRUE,   all.missing = TRUE,   min.rows = NULL,   max.rows = NULL,   min.cols = NULL,   max.cols = NULL,   nrows = NULL,   ncols = NULL,   row.names = NULL,   col.names = NULL,   null.ok = FALSE )  assertDataFrame(   x,   types = character(0L),   any.missing = TRUE,   all.missing = TRUE,   min.rows = NULL,   max.rows = NULL,   min.cols = NULL,   max.cols = NULL,   nrows = NULL,   ncols = NULL,   row.names = NULL,   col.names = NULL,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  assert_data_frame(   x,   types = character(0L),   any.missing = TRUE,   all.missing = TRUE,   min.rows = NULL,   max.rows = NULL,   min.cols = NULL,   max.cols = NULL,   nrows = NULL,   ncols = NULL,   row.names = NULL,   col.names = NULL,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  testDataFrame(   x,   types = character(0L),   any.missing = TRUE,   all.missing = TRUE,   min.rows = NULL,   max.rows = NULL,   min.cols = NULL,   max.cols = NULL,   nrows = NULL,   ncols = NULL,   row.names = NULL,   col.names = NULL,   null.ok = FALSE )  test_data_frame(   x,   types = character(0L),   any.missing = TRUE,   all.missing = TRUE,   min.rows = NULL,   max.rows = NULL,   min.cols = NULL,   max.cols = NULL,   nrows = NULL,   ncols = NULL,   row.names = NULL,   col.names = NULL,   null.ok = FALSE )  expect_data_frame(   x,   types = character(0L),   any.missing = TRUE,   all.missing = TRUE,   min.rows = NULL,   max.rows = NULL,   min.cols = NULL,   max.cols = NULL,   nrows = NULL,   ncols = NULL,   row.names = NULL,   col.names = NULL,   null.ok = FALSE,   info = NULL,   label = vname(x) )"},{"path":"https://mllg.github.io/checkmate/reference/checkDataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is a data frame — checkDataFrame","text":"x [] Object check. types [character] Character vector class names. list element must inherit least one provided types. types “logical”, “integer”, “integerish”, “double”, “numeric”, “complex”, “character”, “factor”, “atomic”, “vector” “atomicvector”, “array”, “matrix”, “list”, “function”, “environment” “null” supported. types inherits used fallback check x's inheritance. Defaults character(0) (check). .missing [logical(1)] missing values allowed? Default TRUE. .missing [logical(1)] columns missing values allowed? Default TRUE. min.rows [integer(1)] Minimum number rows. max.rows [integer(1)] Maximum number rows. min.cols [integer(1)] Minimum number columns. max.cols [integer(1)] Maximum number columns. nrows [integer(1)] Exact number rows. ncols [integer(1)] Exact number columns. row.names [character(1)] Check row names. Default “NULL” (check). See checkNamed possible values. Note can use checkSubset check specific set names. col.names [character(1)] Check column names. Default “NULL” (check). See checkNamed possible values. Note can use checkSubset test specific set names. null.ok [logical(1)] set TRUE, x may also NULL. case type check x performed, additional checks disabled. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkDataFrame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is a data frame — checkDataFrame","text":"Depending function prefix:  check successful, functions  assertDataFrame/assert_data_frame return  x invisibly, whereas  checkDataFrame/check_data_frame  testDataFrame/test_data_frame return  TRUE.  check successful,  assertDataFrame/assert_data_frame  throws error message,  testDataFrame/test_data_frame  returns FALSE,  checkDataFrame/check_data_frame  return string error message.  function expect_data_frame always returns  expectation.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkDataFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is a data frame — checkDataFrame","text":"","code":"testDataFrame(iris) #> [1] TRUE testDataFrame(iris, types = c(\"numeric\", \"factor\"), min.rows = 1, col.names = \"named\") #> [1] TRUE"},{"path":"https://mllg.github.io/checkmate/reference/checkDataTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is a data table — checkDataTable","title":"Check if an argument is a data table — checkDataTable","text":"Check argument data table","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkDataTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is a data table — checkDataTable","text":"","code":"checkDataTable(   x,   key = NULL,   index = NULL,   types = character(0L),   any.missing = TRUE,   all.missing = TRUE,   min.rows = NULL,   max.rows = NULL,   min.cols = NULL,   max.cols = NULL,   nrows = NULL,   ncols = NULL,   row.names = NULL,   col.names = NULL,   null.ok = FALSE )  check_data_table(   x,   key = NULL,   index = NULL,   types = character(0L),   any.missing = TRUE,   all.missing = TRUE,   min.rows = NULL,   max.rows = NULL,   min.cols = NULL,   max.cols = NULL,   nrows = NULL,   ncols = NULL,   row.names = NULL,   col.names = NULL,   null.ok = FALSE )  assertDataTable(   x,   key = NULL,   index = NULL,   types = character(0L),   any.missing = TRUE,   all.missing = TRUE,   min.rows = NULL,   max.rows = NULL,   min.cols = NULL,   max.cols = NULL,   nrows = NULL,   ncols = NULL,   row.names = NULL,   col.names = NULL,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  assert_data_table(   x,   key = NULL,   index = NULL,   types = character(0L),   any.missing = TRUE,   all.missing = TRUE,   min.rows = NULL,   max.rows = NULL,   min.cols = NULL,   max.cols = NULL,   nrows = NULL,   ncols = NULL,   row.names = NULL,   col.names = NULL,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  testDataTable(   x,   key = NULL,   index = NULL,   types = character(0L),   any.missing = TRUE,   all.missing = TRUE,   min.rows = NULL,   max.rows = NULL,   min.cols = NULL,   max.cols = NULL,   nrows = NULL,   ncols = NULL,   row.names = NULL,   col.names = NULL,   null.ok = FALSE )  test_data_table(   x,   key = NULL,   index = NULL,   types = character(0L),   any.missing = TRUE,   all.missing = TRUE,   min.rows = NULL,   max.rows = NULL,   min.cols = NULL,   max.cols = NULL,   nrows = NULL,   ncols = NULL,   row.names = NULL,   col.names = NULL,   null.ok = FALSE )  expect_data_table(   x,   key = NULL,   index = NULL,   types = character(0L),   any.missing = TRUE,   all.missing = TRUE,   min.rows = NULL,   max.rows = NULL,   min.cols = NULL,   max.cols = NULL,   nrows = NULL,   ncols = NULL,   row.names = NULL,   col.names = NULL,   null.ok = FALSE,   info = NULL,   label = vname(x) )"},{"path":"https://mllg.github.io/checkmate/reference/checkDataTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is a data table — checkDataTable","text":"x [] Object check. key [character] Expected primary key(s) data table. index [character] Expected secondary key(s) data table. types [character] Character vector class names. list element must inherit least one provided types. types “logical”, “integer”, “integerish”, “double”, “numeric”, “complex”, “character”, “factor”, “atomic”, “vector” “atomicvector”, “array”, “matrix”, “list”, “function”, “environment” “null” supported. types inherits used fallback check x's inheritance. Defaults character(0) (check). .missing [logical(1)] missing values allowed? Default TRUE. .missing [logical(1)] matrices missing values allowed? Default TRUE. min.rows [integer(1)] Minimum number rows. max.rows [integer(1)] Maximum number rows. min.cols [integer(1)] Minimum number columns. max.cols [integer(1)] Maximum number columns. nrows [integer(1)] Exact number rows. ncols [integer(1)] Exact number columns. row.names [character(1)] Check row names. Default “NULL” (check). See checkNamed possible values. Note can use checkSubset check specific set names. col.names [character(1)] Check column names. Default “NULL” (check). See checkNamed possible values. Note can use checkSubset test specific set names. null.ok [logical(1)] set TRUE, x may also NULL. case type check x performed, additional checks disabled. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkDataTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is a data table — checkDataTable","text":"Depending function prefix:  check successful, functions  assertDataTable/assert_data_table return  x invisibly, whereas  checkDataTable/check_data_table  testDataTable/test_data_table return  TRUE.  check successful,  assertDataTable/assert_data_table  throws error message,  testDataTable/test_data_table  returns FALSE,  checkDataTable/check_data_table  return string error message.  function expect_data_table always returns  expectation.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkDataTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is a data table — checkDataTable","text":"","code":"library(data.table) dt = as.data.table(iris) setkeyv(dt, \"Species\") setkeyv(dt, \"Sepal.Length\", physical = FALSE) testDataTable(dt) #> [1] TRUE testDataTable(dt, key = \"Species\", index = \"Sepal.Length\", any.missing = FALSE) #> [1] TRUE"},{"path":"https://mllg.github.io/checkmate/reference/checkDate.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that an argument is a Date — checkDate","title":"Check that an argument is a Date — checkDate","text":"Checks object class Date.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkDate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that an argument is a Date — checkDate","text":"","code":"checkDate(   x,   lower = NULL,   upper = NULL,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   null.ok = FALSE )  check_date(   x,   lower = NULL,   upper = NULL,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   null.ok = FALSE )  assertDate(   x,   lower = NULL,   upper = NULL,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  assert_date(   x,   lower = NULL,   upper = NULL,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  testDate(   x,   lower = NULL,   upper = NULL,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   null.ok = FALSE )  test_date(   x,   lower = NULL,   upper = NULL,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   null.ok = FALSE )  expect_date(   x,   lower = NULL,   upper = NULL,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   null.ok = FALSE,   info = NULL,   label = vname(x) )"},{"path":"https://mllg.github.io/checkmate/reference/checkDate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that an argument is a Date — checkDate","text":"x [] Object check. lower [Date] non-missing dates x must >= date. Comparison done via Ops.Date. upper [Date] non-missing dates x must <= date. Comparison done via Ops.Date. .missing [logical(1)] vectors missing values allowed? Default TRUE. .missing [logical(1)] vectors non-missing values allowed? Default TRUE. Note empty vectors non-missing values. len [integer(1)] Exact expected length x. min.len [integer(1)] Minimal length x. max.len [integer(1)] Maximal length x. unique [logical(1)] Must values unique? Default FALSE. null.ok [logical(1)] set TRUE, x may also NULL. case type check x performed, additional checks disabled. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkDate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that an argument is a Date — checkDate","text":"Depending function prefix:  check successful, functions  assertAtomic/assert_atomic return  x invisibly, whereas  checkAtomic/check_atomic  testAtomic/test_atomic return  TRUE.  check successful,  assertAtomic/assert_atomic  throws error message,  testAtomic/test_atomic  returns FALSE,  checkAtomic/check_atomic  return string error message.  function expect_atomic always returns  expectation.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkDirectoryExists.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for existence and access rights of directories — checkDirectoryExists","title":"Check for existence and access rights of directories — checkDirectoryExists","text":"Check existence access rights directories","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkDirectoryExists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for existence and access rights of directories — checkDirectoryExists","text":"","code":"checkDirectoryExists(x, access = \"\")  check_directory_exists(x, access = \"\")  assertDirectoryExists(x, access = \"\", .var.name = vname(x), add = NULL)  assert_directory_exists(x, access = \"\", .var.name = vname(x), add = NULL)  testDirectoryExists(x, access = \"\")  test_directory_exists(x, access = \"\")  expect_directory_exists(x, access = \"\", info = NULL, label = vname(x))  checkDirectory(x, access = \"\")  assertDirectory(x, access = \"\", .var.name = vname(x), add = NULL)  assert_directory(x, access = \"\", .var.name = vname(x), add = NULL)  testDirectory(x, access = \"\")  test_directory(x, access = \"\")  expect_directory(x, access = \"\", info = NULL, label = vname(x))"},{"path":"https://mllg.github.io/checkmate/reference/checkDirectoryExists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for existence and access rights of directories — checkDirectoryExists","text":"x [] Object check. access [character(1)] Single string containing possible characters ‘r’, ‘w’ ‘x’ force check read, write execute access rights, respectively. Write executable rights checked Windows. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkDirectoryExists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for existence and access rights of directories — checkDirectoryExists","text":"Depending function prefix:  check successful, functions  assertDirectoryExists/assert_directory_exists return  x invisibly, whereas  checkDirectoryExists/check_directory_exists  testDirectoryExists/test_directory_exists return  TRUE.  check successful,  assertDirectoryExists/assert_directory_exists  throws error message,  testDirectoryExists/test_directory_exists  returns FALSE,  checkDirectoryExists/check_directory_exists  return string error message.  function expect_directory_exists always returns  expectation.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkDirectoryExists.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Check for existence and access rights of directories — checkDirectoryExists","text":"functions without suffix “exists” deprecated removed package future version due name clashes.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkDirectoryExists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for existence and access rights of directories — checkDirectoryExists","text":"","code":"# Is R's home directory readable? testDirectory(R.home(), \"r\") #> [1] TRUE  # Is R's home directory readable and writable? testDirectory(R.home(), \"rw\") #> [1] FALSE"},{"path":"https://mllg.github.io/checkmate/reference/checkDisjunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is disjunct from a given set — checkDisjunct","title":"Check if an argument is disjunct from a given set — checkDisjunct","text":"Check argument disjunct given set","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkDisjunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is disjunct from a given set — checkDisjunct","text":"","code":"checkDisjunct(x, y, fmatch = FALSE)  check_disjunct(x, y, fmatch = FALSE)  assertDisjunct(x, y, fmatch = FALSE, .var.name = vname(x), add = NULL)  assert_disjunct(x, y, fmatch = FALSE, .var.name = vname(x), add = NULL)  testDisjunct(x, y, fmatch = FALSE)  test_disjunct(x, y, fmatch = FALSE)  expect_disjunct(x, y, fmatch = FALSE, info = NULL, label = vname(x))"},{"path":"https://mllg.github.io/checkmate/reference/checkDisjunct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is disjunct from a given set — checkDisjunct","text":"x [] Object check. y [atomic] Set. fmatch [logical(1)] Use set operations implemented fmatch package fastmatch. fastmatch installed, silently falls back match. fmatch modifies y reference: hash table added attribute used subsequent calls. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkDisjunct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is disjunct from a given set — checkDisjunct","text":"Depending function prefix:  check successful, functions  assertDisjunct/assert_disjunct return  x invisibly, whereas  checkDisjunct/check_disjunct  testDisjunct/test_disjunct return  TRUE.  check successful,  assertDisjunct/assert_disjunct  throws error message,  testDisjunct/test_disjunct  returns FALSE,  checkDisjunct/check_disjunct  return string error message.  function expect_disjunct always returns  expectation.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkDisjunct.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Check if an argument is disjunct from a given set — checkDisjunct","text":"object x must type set w.r.t. typeof. Integers doubles treated numeric.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkDisjunct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is disjunct from a given set — checkDisjunct","text":"","code":"testDisjunct(1L, letters) #> [1] TRUE testDisjunct(c(\"a\", \"z\"), letters) #> [1] FALSE  # x is not converted before the comparison (except for numerics) testDisjunct(factor(\"a\"), \"a\") #> [1] FALSE testDisjunct(1, \"1\") #> [1] FALSE testDisjunct(1, as.integer(1)) #> [1] FALSE"},{"path":"https://mllg.github.io/checkmate/reference/checkDouble.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that an argument is a vector of type double — checkDouble","title":"Check that an argument is a vector of type double — checkDouble","text":"Check argument vector type double","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkDouble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that an argument is a vector of type double — checkDouble","text":"","code":"checkDouble(   x,   lower = -Inf,   upper = Inf,   finite = FALSE,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE )  check_double(   x,   lower = -Inf,   upper = Inf,   finite = FALSE,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE )  assertDouble(   x,   lower = -Inf,   upper = Inf,   finite = FALSE,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  assert_double(   x,   lower = -Inf,   upper = Inf,   finite = FALSE,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  testDouble(   x,   lower = -Inf,   upper = Inf,   finite = FALSE,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE )  test_double(   x,   lower = -Inf,   upper = Inf,   finite = FALSE,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE )  expect_double(   x,   lower = -Inf,   upper = Inf,   finite = FALSE,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE,   info = NULL,   label = vname(x) )"},{"path":"https://mllg.github.io/checkmate/reference/checkDouble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that an argument is a vector of type double — checkDouble","text":"x [] Object check. lower [numeric(1)] Lower value elements x must greater equal . upper [numeric(1)] Upper value elements x must lower equal . finite [logical(1)] Check finite values? Default FALSE. .missing [logical(1)] vectors missing values allowed? Default TRUE. .missing [logical(1)] vectors non-missing values allowed? Default TRUE. Note empty vectors non-missing values. len [integer(1)] Exact expected length x. min.len [integer(1)] Minimal length x. max.len [integer(1)] Maximal length x. unique [logical(1)] Must values unique? Default FALSE. sorted [logical(1)] Elements must sorted ascending order. Missing values ignored. names [character(1)] Check names. See checkNamed possible values. Default “” performs check . Note can use checkSubset check specific set names. typed.missing [logical(1)] set FALSE (default), types missing values (NA, NA_integer_, NA_real_, NA_character_ NA_character_) well empty vectors allowed type-checking atomic input. Set TRUE enable strict type checking. null.ok [logical(1)] set TRUE, x may also NULL. case type check x performed, additional checks disabled. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkDouble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that an argument is a vector of type double — checkDouble","text":"Depending function prefix:  check successful, functions  assertDouble/assert_double return  x invisibly, whereas  checkDouble/check_double  testDouble/test_double return  TRUE.  check successful,  assertDouble/assert_double  throws error message,  testDouble/test_double  returns FALSE,  checkDouble/check_double  return string error message.  function expect_double always returns  expectation.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkDouble.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check that an argument is a vector of type double — checkDouble","text":"function distinguish NA, NA_integer_, NA_real_, NA_complex_ NA_character_ NaN.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkDouble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that an argument is a vector of type double — checkDouble","text":"","code":"testDouble(1) #> [1] TRUE testDouble(1L) #> [1] FALSE testDouble(1, min.len = 1, lower = 0) #> [1] TRUE"},{"path":"https://mllg.github.io/checkmate/reference/checkEnvironment.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is an environment — checkEnvironment","title":"Check if an argument is an environment — checkEnvironment","text":"Check argument environment","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkEnvironment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is an environment — checkEnvironment","text":"","code":"checkEnvironment(x, contains = character(0L), null.ok = FALSE)  check_environment(x, contains = character(0L), null.ok = FALSE)  assertEnvironment(   x,   contains = character(0L),   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  assert_environment(   x,   contains = character(0L),   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  testEnvironment(x, contains = character(0L), null.ok = FALSE)  test_environment(x, contains = character(0L), null.ok = FALSE)  expect_environment(   x,   contains = character(0L),   null.ok = FALSE,   info = NULL,   label = vname(x) )"},{"path":"https://mllg.github.io/checkmate/reference/checkEnvironment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is an environment — checkEnvironment","text":"x [] Object check. contains [character] Vector object names expected environment. Defaults character(0). null.ok [logical(1)] set TRUE, x may also NULL. case type check x performed, additional checks disabled. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkEnvironment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is an environment — checkEnvironment","text":"Depending function prefix:  check successful, functions  assertEnvironment/assert_environment return  x invisibly, whereas  checkEnvironment/check_environment  testEnvironment/test_environment return  TRUE.  check successful,  assertEnvironment/assert_environment  throws error message,  testEnvironment/test_environment  returns FALSE,  checkEnvironment/check_environment  return string error message.  function expect_environment always returns  expectation.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkEnvironment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is an environment — checkEnvironment","text":"","code":"ee = as.environment(list(a = 1)) testEnvironment(ee) #> [1] TRUE testEnvironment(ee, contains = \"a\") #> [1] TRUE"},{"path":"https://mllg.github.io/checkmate/reference/checkFALSE.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is FALSE — checkFALSE","title":"Check if an argument is FALSE — checkFALSE","text":"Simply checks argument FALSE.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkFALSE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is FALSE — checkFALSE","text":"","code":"checkFALSE(x, na.ok = FALSE)  check_false(x, na.ok = FALSE)  assertFALSE(x, na.ok = FALSE, .var.name = vname(x), add = NULL)  assert_false(x, na.ok = FALSE, .var.name = vname(x), add = NULL)  testFALSE(x, na.ok = FALSE)  test_false(x, na.ok = FALSE)"},{"path":"https://mllg.github.io/checkmate/reference/checkFALSE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is FALSE — checkFALSE","text":"x [] Object check. na.ok [logical(1)] missing values allowed? Default FALSE. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkFALSE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is FALSE — checkFALSE","text":"Depending function prefix:  check successful, functions  assertFALSE./assert_false. return  x invisibly, whereas  checkFALSE./check_false.  testFALSE./test_false. return  TRUE.  check successful,  assertFALSE./assert_false.  throws error message,  testFALSE./test_false.  returns FALSE,  checkFALSE./check_false.  return string error message.  function expect_false. always returns  expectation.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkFALSE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is FALSE — checkFALSE","text":"","code":"testFALSE(FALSE) #> [1] TRUE testFALSE(TRUE) #> [1] FALSE"},{"path":"https://mllg.github.io/checkmate/reference/checkFactor.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is a factor — checkFactor","title":"Check if an argument is a factor — checkFactor","text":"Check argument factor","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkFactor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is a factor — checkFactor","text":"","code":"checkFactor(   x,   levels = NULL,   ordered = NA,   empty.levels.ok = TRUE,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   n.levels = NULL,   min.levels = NULL,   max.levels = NULL,   unique = FALSE,   names = NULL,   null.ok = FALSE )  check_factor(   x,   levels = NULL,   ordered = NA,   empty.levels.ok = TRUE,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   n.levels = NULL,   min.levels = NULL,   max.levels = NULL,   unique = FALSE,   names = NULL,   null.ok = FALSE )  assertFactor(   x,   levels = NULL,   ordered = NA,   empty.levels.ok = TRUE,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   n.levels = NULL,   min.levels = NULL,   max.levels = NULL,   unique = FALSE,   names = NULL,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  assert_factor(   x,   levels = NULL,   ordered = NA,   empty.levels.ok = TRUE,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   n.levels = NULL,   min.levels = NULL,   max.levels = NULL,   unique = FALSE,   names = NULL,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  testFactor(   x,   levels = NULL,   ordered = NA,   empty.levels.ok = TRUE,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   n.levels = NULL,   min.levels = NULL,   max.levels = NULL,   unique = FALSE,   names = NULL,   null.ok = FALSE )  test_factor(   x,   levels = NULL,   ordered = NA,   empty.levels.ok = TRUE,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   n.levels = NULL,   min.levels = NULL,   max.levels = NULL,   unique = FALSE,   names = NULL,   null.ok = FALSE )  expect_factor(   x,   levels = NULL,   ordered = NA,   empty.levels.ok = TRUE,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   n.levels = NULL,   min.levels = NULL,   max.levels = NULL,   unique = FALSE,   names = NULL,   null.ok = FALSE,   info = NULL,   label = vname(x) )"},{"path":"https://mllg.github.io/checkmate/reference/checkFactor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is a factor — checkFactor","text":"x [] Object check. levels [character] Vector allowed factor levels. ordered [logical(1)] Check ordered factor? FALSE TRUE, checks explicitly unordered ordered factor, respectively. Default NA perform additional check. empty.levels.ok [logical(1)] empty levels allowed? Default TRUE. .missing [logical(1)] vectors missing values allowed? Default TRUE. .missing [logical(1)] vectors non-missing values allowed? Default TRUE. Note empty vectors non-missing values. len [integer(1)] Exact expected length x. min.len [integer(1)] Minimal length x. max.len [integer(1)] Maximal length x. n.levels [integer(1)] Exact number factor levels. Default NULL (check). min.levels [integer(1)] Minimum number factor levels. Default NULL (check). max.levels [integer(1)] Maximum number factor levels. Default NULL (check). unique [logical(1)] Must values unique? Default FALSE. names [character(1)] Check names. See checkNamed possible values. Default “” performs check . Note can use checkSubset check specific set names. null.ok [logical(1)] set TRUE, x may also NULL. case type check x performed, additional checks disabled. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkFactor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is a factor — checkFactor","text":"Depending function prefix:  check successful, functions  assertFactor/assert_factor return  x invisibly, whereas  checkFactor/check_factor  testFactor/test_factor return  TRUE.  check successful,  assertFactor/assert_factor  throws error message,  testFactor/test_factor  returns FALSE,  checkFactor/check_factor  return string error message.  function expect_factor always returns  expectation.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkFactor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is a factor — checkFactor","text":"","code":"x = factor(\"a\", levels = c(\"a\", \"b\")) testFactor(x) #> [1] TRUE testFactor(x, empty.levels.ok = FALSE) #> [1] FALSE"},{"path":"https://mllg.github.io/checkmate/reference/checkFileExists.html","id":null,"dir":"Reference","previous_headings":"","what":"Check existence and access rights of files — checkFileExists","title":"Check existence and access rights of files — checkFileExists","text":"Check existence access rights files","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkFileExists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check existence and access rights of files — checkFileExists","text":"","code":"checkFileExists(x, access = \"\", extension = NULL)  check_file_exists(x, access = \"\", extension = NULL)  assertFileExists(   x,   access = \"\",   extension = NULL,   .var.name = vname(x),   add = NULL )  assert_file_exists(   x,   access = \"\",   extension = NULL,   .var.name = vname(x),   add = NULL )  testFileExists(x, access = \"\", extension = NULL)  test_file_exists(x, access = \"\", extension = NULL)  expect_file_exists(   x,   access = \"\",   extension = NULL,   info = NULL,   label = vname(x) )  checkFile(x, access = \"\", extension = NULL)  assertFile(x, access = \"\", extension = NULL, .var.name = vname(x), add = NULL)  assert_file(x, access = \"\", extension = NULL, .var.name = vname(x), add = NULL)  testFile(x, access = \"\", extension = NULL)  expect_file(x, access = \"\", extension = NULL, info = NULL, label = vname(x))"},{"path":"https://mllg.github.io/checkmate/reference/checkFileExists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check existence and access rights of files — checkFileExists","text":"x [] Object check. access [character(1)] Single string containing possible characters ‘r’, ‘w’ ‘x’ force check read, write execute access rights, respectively. Write executable rights checked Windows. extension [character] Vector allowed file extensions, matched case insensitive. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkFileExists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check existence and access rights of files — checkFileExists","text":"Depending function prefix:  check successful, functions  assertFileExists/assert_file_exists return  x invisibly, whereas  checkFileExists/check_file_exists  testFileExists/test_file_exists return  TRUE.  check successful,  assertFileExists/assert_file_exists  throws error message,  testFileExists/test_file_exists  returns FALSE,  checkFileExists/check_file_exists  return string error message.  function expect_file_exists always returns  expectation.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkFileExists.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Check existence and access rights of files — checkFileExists","text":"functions without suffix “exists” deprecated removed package future version due name clashes. test_file unexported already.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkFileExists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check existence and access rights of files — checkFileExists","text":"","code":"# Check if R's COPYING file is readable testFileExists(file.path(R.home(), \"COPYING\"), access = \"r\") #> [1] TRUE  # Check if R's COPYING file is readable and writable testFileExists(file.path(R.home(), \"COPYING\"), access = \"rw\") #> [1] FALSE"},{"path":"https://mllg.github.io/checkmate/reference/checkFlag.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is a flag — checkFlag","title":"Check if an argument is a flag — checkFlag","text":"flag defined single logical value.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkFlag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is a flag — checkFlag","text":"","code":"checkFlag(x, na.ok = FALSE, null.ok = FALSE)  check_flag(x, na.ok = FALSE, null.ok = FALSE)  assertFlag(x, na.ok = FALSE, null.ok = FALSE, .var.name = vname(x), add = NULL)  assert_flag(   x,   na.ok = FALSE,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  testFlag(x, na.ok = FALSE, null.ok = FALSE)  test_flag(x, na.ok = FALSE, null.ok = FALSE)  expect_flag(x, na.ok = FALSE, null.ok = FALSE, info = NULL, label = vname(x))"},{"path":"https://mllg.github.io/checkmate/reference/checkFlag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is a flag — checkFlag","text":"x [] Object check. na.ok [logical(1)] missing values allowed? Default FALSE. null.ok [logical(1)] set TRUE, x may also NULL. case type check x performed, additional checks disabled. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkFlag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is a flag — checkFlag","text":"Depending function prefix:  check successful, functions  assertFlag/assert_flag return  x invisibly, whereas  checkFlag/check_flag  testFlag/test_flag return  TRUE.  check successful,  assertFlag/assert_flag  throws error message,  testFlag/test_flag  returns FALSE,  checkFlag/check_flag  return string error message.  function expect_flag always returns  expectation.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkFlag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if an argument is a flag — checkFlag","text":"function distinguish NA, NA_integer_, NA_real_, NA_complex_ NA_character_ NaN.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkFlag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is a flag — checkFlag","text":"","code":"testFlag(TRUE) #> [1] TRUE testFlag(1) #> [1] FALSE"},{"path":"https://mllg.github.io/checkmate/reference/checkFormula.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is a formula — checkFormula","title":"Check if an argument is a formula — checkFormula","text":"Check argument formula","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkFormula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is a formula — checkFormula","text":"","code":"checkFormula(x, null.ok = FALSE)  check_formula(x, null.ok = FALSE)  assertFormula(x, null.ok = FALSE, .var.name = vname(x), add = NULL)  assert_formula(x, null.ok = FALSE, .var.name = vname(x), add = NULL)  testFormula(x, null.ok = FALSE)  test_formula(x, null.ok = FALSE)  expect_formula(x, null.ok = FALSE, info = NULL, label = vname(x))"},{"path":"https://mllg.github.io/checkmate/reference/checkFormula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is a formula — checkFormula","text":"x [] Object check. null.ok [logical(1)] set TRUE, x may also NULL. case type check x performed, additional checks disabled. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkFormula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is a formula — checkFormula","text":"Depending function prefix:  check successful, functions  assertFormula/assert_formula return  x invisibly, whereas  checkFormula/check_formula  testFormula/test_formula return  TRUE.  check successful,  assertFormula/assert_formula  throws error message,  testFormula/test_formula  returns FALSE,  checkFormula/check_formula  return string error message.  function expect_formula always returns  expectation.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkFormula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is a formula — checkFormula","text":"","code":"f = Species ~ Sepal.Length + Sepal.Width checkFormula(f) #> [1] TRUE"},{"path":"https://mllg.github.io/checkmate/reference/checkFunction.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is a function — checkFunction","title":"Check if an argument is a function — checkFunction","text":"Check argument function","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkFunction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is a function — checkFunction","text":"","code":"checkFunction(x, args = NULL, ordered = FALSE, nargs = NULL, null.ok = FALSE)  check_function(x, args = NULL, ordered = FALSE, nargs = NULL, null.ok = FALSE)  assertFunction(   x,   args = NULL,   ordered = FALSE,   nargs = NULL,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  assert_function(   x,   args = NULL,   ordered = FALSE,   nargs = NULL,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  testFunction(x, args = NULL, ordered = FALSE, nargs = NULL, null.ok = FALSE)  test_function(x, args = NULL, ordered = FALSE, nargs = NULL, null.ok = FALSE)  expect_function(   x,   args = NULL,   ordered = FALSE,   nargs = NULL,   null.ok = FALSE,   info = NULL,   label = vname(x) )"},{"path":"https://mllg.github.io/checkmate/reference/checkFunction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is a function — checkFunction","text":"x [] Object check. args [character] Expected formal arguments. Checks function arguments set character(0). Default NULL (check). ordered [logical(1)] Flag whether arguments provided args must first length(args) arguments function specified order. Default FALSE. nargs [integer(1)] Required number arguments, without .... Default NULL (check). null.ok [logical(1)] set TRUE, x may also NULL. case type check x performed, additional checks disabled. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkFunction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is a function — checkFunction","text":"Depending function prefix:  check successful, functions  assertFunction/assert_function return  x invisibly, whereas  checkFunction/check_function  testFunction/test_function return  TRUE.  check successful,  assertFunction/assert_function  throws error message,  testFunction/test_function  returns FALSE,  checkFunction/check_function  return string error message.  function expect_function always returns  expectation.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkFunction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is a function — checkFunction","text":"","code":"testFunction(mean) #> [1] TRUE testFunction(mean, args = \"x\") #> [1] TRUE"},{"path":"https://mllg.github.io/checkmate/reference/checkInt.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is a single integerish value — checkInt","title":"Check if an argument is a single integerish value — checkInt","text":"Check argument single integerish value","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkInt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is a single integerish value — checkInt","text":"","code":"checkInt(   x,   na.ok = FALSE,   lower = -Inf,   upper = Inf,   tol = sqrt(.Machine$double.eps),   null.ok = FALSE )  check_int(   x,   na.ok = FALSE,   lower = -Inf,   upper = Inf,   tol = sqrt(.Machine$double.eps),   null.ok = FALSE )  assertInt(   x,   na.ok = FALSE,   lower = -Inf,   upper = Inf,   tol = sqrt(.Machine$double.eps),   null.ok = FALSE,   coerce = FALSE,   .var.name = vname(x),   add = NULL )  assert_int(   x,   na.ok = FALSE,   lower = -Inf,   upper = Inf,   tol = sqrt(.Machine$double.eps),   null.ok = FALSE,   coerce = FALSE,   .var.name = vname(x),   add = NULL )  testInt(   x,   na.ok = FALSE,   lower = -Inf,   upper = Inf,   tol = sqrt(.Machine$double.eps),   null.ok = FALSE )  test_int(   x,   na.ok = FALSE,   lower = -Inf,   upper = Inf,   tol = sqrt(.Machine$double.eps),   null.ok = FALSE )  expect_int(   x,   na.ok = FALSE,   lower = -Inf,   upper = Inf,   tol = sqrt(.Machine$double.eps),   null.ok = FALSE,   info = NULL,   label = vname(x) )"},{"path":"https://mllg.github.io/checkmate/reference/checkInt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is a single integerish value — checkInt","text":"x [] Object check. na.ok [logical(1)] missing values allowed? Default FALSE. lower [numeric(1)] Lower value elements x must greater equal . upper [numeric(1)] Upper value elements x must lower equal . tol [double(1)] Numerical tolerance used check whether double complex can converted. Default sqrt(.Machine$double.eps). null.ok [logical(1)] set TRUE, x may also NULL. case type check x performed, additional checks disabled. coerce [logical(1)] TRUE, input x returned integer successful assertion. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkInt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is a single integerish value — checkInt","text":"Depending function prefix:  check successful, functions  assertInt/assert_int return  x invisibly, whereas  checkInt/check_int  testInt/test_int return  TRUE.  check successful,  assertInt/assert_int  throws error message,  testInt/test_int  returns FALSE,  checkInt/check_int  return string error message.  function expect_int always returns  expectation.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkInt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if an argument is a single integerish value — checkInt","text":"function distinguish NA, NA_integer_, NA_real_, NA_complex_ NA_character_ NaN.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkInt.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Check if an argument is a single integerish value — checkInt","text":"perform assertion convert integer, use asInt. assertInt convert numerics integer.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkInt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is a single integerish value — checkInt","text":"","code":"testInt(1) #> [1] TRUE testInt(-1, lower = 0) #> [1] FALSE"},{"path":"https://mllg.github.io/checkmate/reference/checkInteger.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is vector of type integer — checkInteger","title":"Check if an argument is vector of type integer — checkInteger","text":"Check argument vector type integer","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkInteger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is vector of type integer — checkInteger","text":"","code":"checkInteger(   x,   lower = -Inf,   upper = Inf,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE )  check_integer(   x,   lower = -Inf,   upper = Inf,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE )  assertInteger(   x,   lower = -Inf,   upper = Inf,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  assert_integer(   x,   lower = -Inf,   upper = Inf,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  testInteger(   x,   lower = -Inf,   upper = Inf,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE )  test_integer(   x,   lower = -Inf,   upper = Inf,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE )  expect_integer(   x,   lower = -Inf,   upper = Inf,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE,   info = NULL,   label = vname(x) )"},{"path":"https://mllg.github.io/checkmate/reference/checkInteger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is vector of type integer — checkInteger","text":"x [] Object check. lower [numeric(1)] Lower value elements x must greater equal . upper [numeric(1)] Upper value elements x must lower equal . .missing [logical(1)] vectors missing values allowed? Default TRUE. .missing [logical(1)] vectors non-missing values allowed? Default TRUE. Note empty vectors non-missing values. len [integer(1)] Exact expected length x. min.len [integer(1)] Minimal length x. max.len [integer(1)] Maximal length x. unique [logical(1)] Must values unique? Default FALSE. sorted [logical(1)] Elements must sorted ascending order. Missing values ignored. names [character(1)] Check names. See checkNamed possible values. Default “” performs check . Note can use checkSubset check specific set names. typed.missing [logical(1)] set FALSE (default), types missing values (NA, NA_integer_, NA_real_, NA_character_ NA_character_) well empty vectors allowed type-checking atomic input. Set TRUE enable strict type checking. null.ok [logical(1)] set TRUE, x may also NULL. case type check x performed, additional checks disabled. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkInteger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is vector of type integer — checkInteger","text":"Depending function prefix:  check successful, functions  assertInteger/assert_integer return  x invisibly, whereas  checkInteger/check_integer  testInteger/test_integer return  TRUE.  check successful,  assertInteger/assert_integer  throws error message,  testInteger/test_integer  returns FALSE,  checkInteger/check_integer  return string error message.  function expect_integer always returns  expectation.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkInteger.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if an argument is vector of type integer — checkInteger","text":"function distinguish NA, NA_integer_, NA_real_, NA_complex_ NA_character_ NaN.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkInteger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is vector of type integer — checkInteger","text":"","code":"testInteger(1L) #> [1] TRUE testInteger(1.) #> [1] FALSE testInteger(1:2, lower = 1, upper = 2, any.missing = FALSE) #> [1] TRUE"},{"path":"https://mllg.github.io/checkmate/reference/checkIntegerish.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is an integerish vector — checkIntegerish","title":"Check if an object is an integerish vector — checkIntegerish","text":"integerish value defined value safely convertible integer. includes integers numeric values sufficiently close integer w.r.t. numeric tolerance `tol`.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkIntegerish.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is an integerish vector — checkIntegerish","text":"","code":"checkIntegerish(   x,   tol = sqrt(.Machine$double.eps),   lower = -Inf,   upper = Inf,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE )  check_integerish(   x,   tol = sqrt(.Machine$double.eps),   lower = -Inf,   upper = Inf,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE )  assertIntegerish(   x,   tol = sqrt(.Machine$double.eps),   lower = -Inf,   upper = Inf,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE,   coerce = FALSE,   .var.name = vname(x),   add = NULL )  assert_integerish(   x,   tol = sqrt(.Machine$double.eps),   lower = -Inf,   upper = Inf,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE,   coerce = FALSE,   .var.name = vname(x),   add = NULL )  testIntegerish(   x,   tol = sqrt(.Machine$double.eps),   lower = -Inf,   upper = Inf,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE )  test_integerish(   x,   tol = sqrt(.Machine$double.eps),   lower = -Inf,   upper = Inf,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE )  expect_integerish(   x,   tol = sqrt(.Machine$double.eps),   lower = -Inf,   upper = Inf,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE,   info = NULL,   label = vname(x) )"},{"path":"https://mllg.github.io/checkmate/reference/checkIntegerish.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is an integerish vector — checkIntegerish","text":"x [] Object check. tol [double(1)] Numerical tolerance used check whether double complex can converted. Default sqrt(.Machine$double.eps). lower [numeric(1)] Lower value elements x must greater equal . upper [numeric(1)] Upper value elements x must lower equal . .missing [logical(1)] vectors missing values allowed? Default TRUE. .missing [logical(1)] vectors non-missing values allowed? Default TRUE. Note empty vectors non-missing values. len [integer(1)] Exact expected length x. min.len [integer(1)] Minimal length x. max.len [integer(1)] Maximal length x. unique [logical(1)] Must values unique? Default FALSE. sorted [logical(1)] Elements must sorted ascending order. Missing values ignored. names [character(1)] Check names. See checkNamed possible values. Default “” performs check . Note can use checkSubset check specific set names. typed.missing [logical(1)] set FALSE (default), types missing values (NA, NA_integer_, NA_real_, NA_character_ NA_character_) well empty vectors allowed type-checking atomic input. Set TRUE enable strict type checking. null.ok [logical(1)] set TRUE, x may also NULL. case type check x performed, additional checks disabled. coerce [logical(1)] TRUE, input x returned integer successful assertion. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkIntegerish.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is an integerish vector — checkIntegerish","text":"Depending function prefix:  check successful, functions  assertIntegerish/assert_integerish return  x invisibly, whereas  checkIntegerish/check_integerish  testIntegerish/test_integerish return  TRUE.  check successful,  assertIntegerish/assert_integerish  throws error message,  testIntegerish/test_integerish  returns FALSE,  checkIntegerish/check_integerish  return string error message.  function expect_integerish always returns  expectation.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkIntegerish.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if an object is an integerish vector — checkIntegerish","text":"function distinguish NA, NA_integer_, NA_real_, NA_complex_ NA_character_ NaN.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkIntegerish.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Check if an object is an integerish vector — checkIntegerish","text":"convert integerish integer, use asInteger.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkIntegerish.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an object is an integerish vector — checkIntegerish","text":"","code":"testIntegerish(1L) #> [1] TRUE testIntegerish(1.) #> [1] TRUE testIntegerish(1:2, lower = 1L, upper = 2L, any.missing = FALSE) #> [1] TRUE"},{"path":"https://mllg.github.io/checkmate/reference/checkList.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is a list — checkList","title":"Check if an argument is a list — checkList","text":"Check argument list","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is a list — checkList","text":"","code":"checkList(   x,   types = character(0L),   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL,   null.ok = FALSE )  check_list(   x,   types = character(0L),   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL,   null.ok = FALSE )  assertList(   x,   types = character(0L),   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  assert_list(   x,   types = character(0L),   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  testList(   x,   types = character(0L),   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL,   null.ok = FALSE )  test_list(   x,   types = character(0L),   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL,   null.ok = FALSE )  expect_list(   x,   types = character(0L),   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL,   null.ok = FALSE,   info = NULL,   label = vname(x) )"},{"path":"https://mllg.github.io/checkmate/reference/checkList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is a list — checkList","text":"x [] Object check. types [character] Character vector class names. list element must inherit least one provided types. types “logical”, “integer”, “integerish”, “double”, “numeric”, “complex”, “character”, “factor”, “atomic”, “vector” “atomicvector”, “array”, “matrix”, “list”, “function”, “environment” “null” supported. types inherits used fallback check x's inheritance. Defaults character(0) (check). .missing [logical(1)] vectors missing values allowed? Default TRUE. .missing [logical(1)] vectors non-missing values allowed? Default TRUE. Note empty vectors non-missing values. len [integer(1)] Exact expected length x. min.len [integer(1)] Minimal length x. max.len [integer(1)] Maximal length x. unique [logical(1)] Must values unique? Default FALSE. names [character(1)] Check names. See checkNamed possible values. Default “” performs check . Note can use checkSubset check specific set names. null.ok [logical(1)] set TRUE, x may also NULL. case type check x performed, additional checks disabled. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is a list — checkList","text":"Depending function prefix:  check successful, functions  assertList/assert_list return  x invisibly, whereas  checkList/check_list  testList/test_list return  TRUE.  check successful,  assertList/assert_list  throws error message,  testList/test_list  returns FALSE,  checkList/check_list  return string error message.  function expect_list always returns  expectation.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkList.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Check if an argument is a list — checkList","text":"Contrary R's .list, objects type data.frame pairlist recognized list. Missingness defined elements list NULL, analogously anyMissing. test uniqueness differentiate different NA types built-R. required consistent unique checking scalar missing values. Also see example.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is a list — checkList","text":"","code":"testList(list()) #> [1] TRUE testList(as.list(iris), types = c(\"numeric\", \"factor\")) #> [1] TRUE  # Missingness testList(list(1, NA), any.missing = FALSE) #> [1] TRUE testList(list(1, NULL), any.missing = FALSE) #> [1] FALSE  # Uniqueness differentiates between different NA types: testList(list(NA, NA), unique = TRUE) #> [1] FALSE testList(list(NA, NA_real_), unique = TRUE) #> [1] TRUE"},{"path":"https://mllg.github.io/checkmate/reference/checkLogical.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is a vector of type logical — checkLogical","title":"Check if an argument is a vector of type logical — checkLogical","text":"Check argument vector type logical","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkLogical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is a vector of type logical — checkLogical","text":"","code":"checkLogical(   x,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE )  check_logical(   x,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE )  assertLogical(   x,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  assert_logical(   x,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  testLogical(   x,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE )  test_logical(   x,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE )  expect_logical(   x,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE,   info = NULL,   label = vname(x) )"},{"path":"https://mllg.github.io/checkmate/reference/checkLogical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is a vector of type logical — checkLogical","text":"x [] Object check. .missing [logical(1)] vectors missing values allowed? Default TRUE. .missing [logical(1)] vectors non-missing values allowed? Default TRUE. Note empty vectors non-missing values. len [integer(1)] Exact expected length x. min.len [integer(1)] Minimal length x. max.len [integer(1)] Maximal length x. unique [logical(1)] Must values unique? Default FALSE. names [character(1)] Check names. See checkNamed possible values. Default “” performs check . Note can use checkSubset check specific set names. typed.missing [logical(1)] set FALSE (default), types missing values (NA, NA_integer_, NA_real_, NA_character_ NA_character_) well empty vectors allowed type-checking atomic input. Set TRUE enable strict type checking. null.ok [logical(1)] set TRUE, x may also NULL. case type check x performed, additional checks disabled. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkLogical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is a vector of type logical — checkLogical","text":"Depending function prefix:  check successful, functions  assertLogical/assert_logical return  x invisibly, whereas  checkLogical/check_logical  testLogical/test_logical return  TRUE.  check successful,  assertLogical/assert_logical  throws error message,  testLogical/test_logical  returns FALSE,  checkLogical/check_logical  return string error message.  function expect_logical always returns  expectation.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkLogical.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if an argument is a vector of type logical — checkLogical","text":"function distinguish NA, NA_integer_, NA_real_, NA_complex_ NA_character_ NaN.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkLogical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is a vector of type logical — checkLogical","text":"","code":"testLogical(TRUE) #> [1] TRUE testLogical(TRUE, min.len = 1) #> [1] TRUE"},{"path":"https://mllg.github.io/checkmate/reference/checkMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is a matrix — checkMatrix","title":"Check if an argument is a matrix — checkMatrix","text":"Check argument matrix","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is a matrix — checkMatrix","text":"","code":"checkMatrix(   x,   mode = NULL,   any.missing = TRUE,   all.missing = TRUE,   min.rows = NULL,   max.rows = NULL,   min.cols = NULL,   max.cols = NULL,   nrows = NULL,   ncols = NULL,   row.names = NULL,   col.names = NULL,   null.ok = FALSE )  check_matrix(   x,   mode = NULL,   any.missing = TRUE,   all.missing = TRUE,   min.rows = NULL,   max.rows = NULL,   min.cols = NULL,   max.cols = NULL,   nrows = NULL,   ncols = NULL,   row.names = NULL,   col.names = NULL,   null.ok = FALSE )  assertMatrix(   x,   mode = NULL,   any.missing = TRUE,   all.missing = TRUE,   min.rows = NULL,   max.rows = NULL,   min.cols = NULL,   max.cols = NULL,   nrows = NULL,   ncols = NULL,   row.names = NULL,   col.names = NULL,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  assert_matrix(   x,   mode = NULL,   any.missing = TRUE,   all.missing = TRUE,   min.rows = NULL,   max.rows = NULL,   min.cols = NULL,   max.cols = NULL,   nrows = NULL,   ncols = NULL,   row.names = NULL,   col.names = NULL,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  testMatrix(   x,   mode = NULL,   any.missing = TRUE,   all.missing = TRUE,   min.rows = NULL,   max.rows = NULL,   min.cols = NULL,   max.cols = NULL,   nrows = NULL,   ncols = NULL,   row.names = NULL,   col.names = NULL,   null.ok = FALSE )  test_matrix(   x,   mode = NULL,   any.missing = TRUE,   all.missing = TRUE,   min.rows = NULL,   max.rows = NULL,   min.cols = NULL,   max.cols = NULL,   nrows = NULL,   ncols = NULL,   row.names = NULL,   col.names = NULL,   null.ok = FALSE )  expect_matrix(   x,   mode = NULL,   any.missing = TRUE,   all.missing = TRUE,   min.rows = NULL,   max.rows = NULL,   min.cols = NULL,   max.cols = NULL,   nrows = NULL,   ncols = NULL,   row.names = NULL,   col.names = NULL,   null.ok = FALSE,   info = NULL,   label = vname(x) )"},{"path":"https://mllg.github.io/checkmate/reference/checkMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is a matrix — checkMatrix","text":"x [] Object check. mode [character(1)] Storage mode array. Arrays can hold vectors, .e. “logical”, “integer”, “integerish”, “double”, “numeric”, “complex”, “character” “list”. can also specify “atomic” explicitly prohibit lists. Default NULL (check). values x missing, check skipped. .missing [logical(1)] missing values allowed? Default TRUE. .missing [logical(1)] matrices missing values allowed? Default TRUE. min.rows [integer(1)] Minimum number rows. max.rows [integer(1)] Maximum number rows. min.cols [integer(1)] Minimum number columns. max.cols [integer(1)] Maximum number columns. nrows [integer(1)] Exact number rows. ncols [integer(1)] Exact number columns. row.names [character(1)] Check row names. Default “NULL” (check). See checkNamed possible values. Note can use checkSubset check specific set names. col.names [character(1)] Check column names. Default “NULL” (check). See checkNamed possible values. Note can use checkSubset test specific set names. null.ok [logical(1)] set TRUE, x may also NULL. case type check x performed, additional checks disabled. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is a matrix — checkMatrix","text":"Depending function prefix:  check successful, functions  assertMatrix/assert_matrix return  x invisibly, whereas  checkMatrix/check_matrix  testMatrix/test_matrix return  TRUE.  check successful,  assertMatrix/assert_matrix  throws error message,  testMatrix/test_matrix  returns FALSE,  checkMatrix/check_matrix  return string error message.  function expect_matrix always returns  expectation.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is a matrix — checkMatrix","text":"","code":"x = matrix(1:9, 3) colnames(x) = letters[1:3] testMatrix(x, nrows = 3, min.cols = 1, col.names = \"named\") #> [1] TRUE"},{"path":"https://mllg.github.io/checkmate/reference/checkMultiClass.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the class membership of an argument — checkMultiClass","title":"Check the class membership of an argument — checkMultiClass","text":"Check class membership argument","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkMultiClass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the class membership of an argument — checkMultiClass","text":"","code":"checkMultiClass(x, classes, null.ok = FALSE)  check_multi_class(x, classes, null.ok = FALSE)  assertMultiClass(x, classes, null.ok = FALSE, .var.name = vname(x), add = NULL)  assert_multi_class(   x,   classes,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  testMultiClass(x, classes, null.ok = FALSE)  test_multi_class(x, classes, null.ok = FALSE)  expect_multi_class(x, classes, null.ok = FALSE, info = NULL, label = vname(x))"},{"path":"https://mllg.github.io/checkmate/reference/checkMultiClass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the class membership of an argument — checkMultiClass","text":"x [] Object check. classes [character] Class names check inheritance inherits. x must inherit specified classes. null.ok [logical(1)] set TRUE, x may also NULL. case type check x performed, additional checks disabled. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkMultiClass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the class membership of an argument — checkMultiClass","text":"Depending function prefix:  check successful, functions  assertMultiClass/assert_multi_class return  x invisibly, whereas  checkMultiClass/check_multi_class  testMultiClass/test_multi_class return  TRUE.  check successful,  assertMultiClass/assert_multi_class  throws error message,  testMultiClass/test_multi_class  returns FALSE,  checkMultiClass/check_multi_class  return string error message.  function expect_multi_class always returns  expectation.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkMultiClass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the class membership of an argument — checkMultiClass","text":"","code":"x = 1 class(x) = \"bar\" checkMultiClass(x, c(\"foo\", \"bar\")) #> [1] TRUE checkMultiClass(x, c(\"foo\", \"foobar\")) #> [1] \"Must inherit from class 'foo'/'foobar', but has class 'bar'\""},{"path":"https://mllg.github.io/checkmate/reference/checkNamed.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is named — checkNamed","title":"Check if an argument is named — checkNamed","text":"Check argument named","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkNamed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is named — checkNamed","text":"","code":"checkNamed(x, type = \"named\")  check_named(x, type = \"named\")  assertNamed(x, type = \"named\", .var.name = vname(x), add = NULL)  assert_named(x, type = \"named\", .var.name = vname(x), add = NULL)  testNamed(x, type = \"named\")  test_named(x, type = \"named\")"},{"path":"https://mllg.github.io/checkmate/reference/checkNamed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is named — checkNamed","text":"x [] Object check. type [character(1)] Select check(s) perform. “unnamed” checks x unnamed. “named” (default) checks x named excludes names NA empty (\"\"). “unique” additionally tests non-duplicated names. “strict” checks unique names comply R's variable name restrictions. Note zero-length x every name check evaluates TRUE. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkNamed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is named — checkNamed","text":"Depending function prefix:  check successful, functions  assertNamed/assert_named return  x invisibly, whereas  checkNamed/check_named  testNamed/test_named return  TRUE.  check successful,  assertNamed/assert_named  throws error message,  testNamed/test_named  returns FALSE,  checkNamed/check_named  return string error message.  function expect_named always returns  expectation.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkNamed.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Check if an argument is named — checkNamed","text":"function deprecated removed future version. Please use checkNames instead.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkNamed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is named — checkNamed","text":"","code":"x = 1:3 testNamed(x, \"unnamed\") #> [1] TRUE names(x) = letters[1:3] testNamed(x, \"unique\") #> [1] TRUE"},{"path":"https://mllg.github.io/checkmate/reference/checkNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Check names to comply to specific rules — checkNames","title":"Check names to comply to specific rules — checkNames","text":"Performs various checks character vectors, usually names.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check names to comply to specific rules — checkNames","text":"","code":"checkNames(   x,   type = \"named\",   subset.of = NULL,   must.include = NULL,   permutation.of = NULL,   identical.to = NULL,   disjunct.from = NULL,   what = \"names\" )  check_names(   x,   type = \"named\",   subset.of = NULL,   must.include = NULL,   permutation.of = NULL,   identical.to = NULL,   disjunct.from = NULL,   what = \"names\" )  assertNames(   x,   type = \"named\",   subset.of = NULL,   must.include = NULL,   permutation.of = NULL,   identical.to = NULL,   disjunct.from = NULL,   what = \"names\",   .var.name = vname(x),   add = NULL )  assert_names(   x,   type = \"named\",   subset.of = NULL,   must.include = NULL,   permutation.of = NULL,   identical.to = NULL,   disjunct.from = NULL,   what = \"names\",   .var.name = vname(x),   add = NULL )  testNames(   x,   type = \"named\",   subset.of = NULL,   must.include = NULL,   permutation.of = NULL,   identical.to = NULL,   disjunct.from = NULL,   what = \"names\" )  test_names(   x,   type = \"named\",   subset.of = NULL,   must.include = NULL,   permutation.of = NULL,   identical.to = NULL,   disjunct.from = NULL,   what = \"names\" )  expect_names(   x,   type = \"named\",   subset.of = NULL,   must.include = NULL,   permutation.of = NULL,   identical.to = NULL,   disjunct.from = NULL,   what = \"names\",   info = NULL,   label = vname(x) )"},{"path":"https://mllg.github.io/checkmate/reference/checkNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check names to comply to specific rules — checkNames","text":"x [character || NULL] Names check using rules defined via type. type [character(1)] Type formal check(s) perform names. unnamed: Checks x NULL. named: Checks x regular names excludes names NA empty (\"\"). unique: Performs checks like “named” additionally tests non-duplicated names. strict: Performs checks like “unique” additionally fails names UTF-8 characters names comply R's variable name restrictions. regular expression, “^[.]*[-zA-Z]+[-zA-Z0-9._]*$”. ids: “strict”, enforce uniqueness. Note zero-length x, name checks evaluate TRUE. subset.[character] Names provided x must subset set subset.. must.include [character] Names provided x must superset set must.include. permutation.[character] Names provided x must permutation set permutation.. Duplicated names permutation.stripped duplicated names x thus lead failed check. Use argument instead identical.order names relevant. identical.[character] Names provided x must identical vector identical.. Use argument instead permutation.order names relevant. disjunct.[character] Names provided x must may present vector disjunct.. [character(1)] Type name vector check, e.g. “names” (default), “colnames” “rownames”. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkNames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check names to comply to specific rules — checkNames","text":"Depending function prefix:  check successful, functions  assertNames/assert_names return  x invisibly, whereas  checkNames/check_names  testNames/test_names return  TRUE.  check successful,  assertNames/assert_names  throws error message,  testNames/test_names  returns FALSE,  checkNames/check_names  return string error message.  function expect_names always returns  expectation.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkNames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check names to comply to specific rules — checkNames","text":"","code":"x = 1:3 testNames(names(x), \"unnamed\") #> [1] TRUE names(x) = letters[1:3] testNames(names(x), \"unique\") #> [1] TRUE  cn = c(\"Species\", \"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\") assertNames(names(iris), permutation.of = cn)"},{"path":"https://mllg.github.io/checkmate/reference/checkNull.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is NULL — checkNull","title":"Check if an argument is NULL — checkNull","text":"Check argument NULL","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkNull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is NULL — checkNull","text":"","code":"checkNull(x)  check_null(x)  assertNull(x, .var.name = vname(x), add = NULL)  assert_null(x, .var.name = vname(x), add = NULL)  testNull(x)  test_null(x)"},{"path":"https://mllg.github.io/checkmate/reference/checkNull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is NULL — checkNull","text":"x [] Object check. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkNull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is NULL — checkNull","text":"Depending function prefix:  check successful, functions  assertNull/assert_null return  x invisibly, whereas  checkNull/check_null  testNull/test_null return  TRUE.  check successful,  assertNull/assert_null  throws error message,  testNull/test_null  returns FALSE,  checkNull/check_null  return string error message.  function expect_null always returns  expectation.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkNull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is NULL — checkNull","text":"","code":"testNull(NULL) #> [1] TRUE testNull(1) #> [1] FALSE"},{"path":"https://mllg.github.io/checkmate/reference/checkNumber.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is a single numeric value — checkNumber","title":"Check if an argument is a single numeric value — checkNumber","text":"Check argument single numeric value","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkNumber.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is a single numeric value — checkNumber","text":"","code":"checkNumber(   x,   na.ok = FALSE,   lower = -Inf,   upper = Inf,   finite = FALSE,   null.ok = FALSE )  check_number(   x,   na.ok = FALSE,   lower = -Inf,   upper = Inf,   finite = FALSE,   null.ok = FALSE )  assertNumber(   x,   na.ok = FALSE,   lower = -Inf,   upper = Inf,   finite = FALSE,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  assert_number(   x,   na.ok = FALSE,   lower = -Inf,   upper = Inf,   finite = FALSE,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  testNumber(   x,   na.ok = FALSE,   lower = -Inf,   upper = Inf,   finite = FALSE,   null.ok = FALSE )  test_number(   x,   na.ok = FALSE,   lower = -Inf,   upper = Inf,   finite = FALSE,   null.ok = FALSE )  expect_number(   x,   na.ok = FALSE,   lower = -Inf,   upper = Inf,   finite = FALSE,   null.ok = FALSE,   info = NULL,   label = vname(x) )"},{"path":"https://mllg.github.io/checkmate/reference/checkNumber.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is a single numeric value — checkNumber","text":"x [] Object check. na.ok [logical(1)] missing values allowed? Default FALSE. lower [numeric(1)] Lower value elements x must greater equal . upper [numeric(1)] Upper value elements x must lower equal . finite [logical(1)] Check finite values? Default FALSE. null.ok [logical(1)] set TRUE, x may also NULL. case type check x performed, additional checks disabled. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkNumber.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is a single numeric value — checkNumber","text":"Depending function prefix:  check successful, functions  assertNumber/assert_number return  x invisibly, whereas  checkNumber/check_number  testNumber/test_number return  TRUE.  check successful,  assertNumber/assert_number  throws error message,  testNumber/test_number  returns FALSE,  checkNumber/check_number  return string error message.  function expect_number always returns  expectation.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkNumber.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if an argument is a single numeric value — checkNumber","text":"function distinguish NA, NA_integer_, NA_real_, NA_complex_ NA_character_ NaN.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkNumber.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is a single numeric value — checkNumber","text":"","code":"testNumber(1) #> [1] TRUE testNumber(1:2) #> [1] FALSE"},{"path":"https://mllg.github.io/checkmate/reference/checkNumeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that an argument is a vector of type numeric — checkNumeric","title":"Check that an argument is a vector of type numeric — checkNumeric","text":"Vectors storage type “integer” “double” count “numeric”, c.f. .numeric. explicitly check real integer double vectors, see checkInteger, checkIntegerish checkDouble.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkNumeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that an argument is a vector of type numeric — checkNumeric","text":"","code":"checkNumeric(   x,   lower = -Inf,   upper = Inf,   finite = FALSE,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE )  check_numeric(   x,   lower = -Inf,   upper = Inf,   finite = FALSE,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE )  assertNumeric(   x,   lower = -Inf,   upper = Inf,   finite = FALSE,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  assert_numeric(   x,   lower = -Inf,   upper = Inf,   finite = FALSE,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  testNumeric(   x,   lower = -Inf,   upper = Inf,   finite = FALSE,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE )  test_numeric(   x,   lower = -Inf,   upper = Inf,   finite = FALSE,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE )  expect_numeric(   x,   lower = -Inf,   upper = Inf,   finite = FALSE,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE,   info = NULL,   label = vname(x) )"},{"path":"https://mllg.github.io/checkmate/reference/checkNumeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that an argument is a vector of type numeric — checkNumeric","text":"x [] Object check. lower [numeric(1)] Lower value elements x must greater equal . upper [numeric(1)] Upper value elements x must lower equal . finite [logical(1)] Check finite values? Default FALSE. .missing [logical(1)] vectors missing values allowed? Default TRUE. .missing [logical(1)] vectors non-missing values allowed? Default TRUE. Note empty vectors non-missing values. len [integer(1)] Exact expected length x. min.len [integer(1)] Minimal length x. max.len [integer(1)] Maximal length x. unique [logical(1)] Must values unique? Default FALSE. sorted [logical(1)] Elements must sorted ascending order. Missing values ignored. names [character(1)] Check names. See checkNamed possible values. Default “” performs check . Note can use checkSubset check specific set names. typed.missing [logical(1)] set FALSE (default), types missing values (NA, NA_integer_, NA_real_, NA_character_ NA_character_) well empty vectors allowed type-checking atomic input. Set TRUE enable strict type checking. null.ok [logical(1)] set TRUE, x may also NULL. case type check x performed, additional checks disabled. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkNumeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that an argument is a vector of type numeric — checkNumeric","text":"Depending function prefix:  check successful, functions  assertNumeric/assert_numeric return  x invisibly, whereas  checkNumeric/check_numeric  testNumeric/test_numeric return  TRUE.  check successful,  assertNumeric/assert_numeric  throws error message,  testNumeric/test_numeric  returns FALSE,  checkNumeric/check_numeric  return string error message.  function expect_numeric always returns  expectation.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkNumeric.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check that an argument is a vector of type numeric — checkNumeric","text":"function distinguish NA, NA_integer_, NA_real_, NA_complex_ NA_character_ NaN.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkNumeric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that an argument is a vector of type numeric — checkNumeric","text":"","code":"testNumeric(1) #> [1] TRUE testNumeric(1, min.len = 1, lower = 0) #> [1] TRUE"},{"path":"https://mllg.github.io/checkmate/reference/checkOS.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the operating system — checkOS","title":"Check the operating system — checkOS","text":"Check operating system","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkOS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the operating system — checkOS","text":"","code":"checkOS(os)  check_os(os)  assertOS(os, add = NULL, .var.name = NULL)  assert_os(os, add = NULL, .var.name = NULL)  testOS(os)  test_os(os)  expect_os(os, info = NULL, label = NULL)"},{"path":"https://mllg.github.io/checkmate/reference/checkOS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the operating system — checkOS","text":"os [character(1)] Check operating system set possible elements “windows”, “mac”, “linux” “solaris”. add [AssertCollection] Collection store assertion messages. See AssertCollection. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkOS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the operating system — checkOS","text":"Depending function prefix:  check successful, functions  assertOS/assert_os return  x invisibly, whereas  checkOS/check_os  testOS/test_os return  TRUE.  check successful,  assertOS/assert_os  throws error message,  testOS/test_os  returns FALSE,  checkOS/check_os  return string error message.  function expect_os always returns  expectation.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkOS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the operating system — checkOS","text":"","code":"testOS(\"linux\") #> [1] TRUE"},{"path":"https://mllg.github.io/checkmate/reference/checkPOSIXct.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that an argument is a date/time object in POSIXct format — checkPOSIXct","title":"Check that an argument is a date/time object in POSIXct format — checkPOSIXct","text":"Checks object class POSIXct.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkPOSIXct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that an argument is a date/time object in POSIXct format — checkPOSIXct","text":"","code":"checkPOSIXct(   x,   lower = NULL,   upper = NULL,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   null.ok = FALSE )  check_posixct(   x,   lower = NULL,   upper = NULL,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   null.ok = FALSE )  assertPOSIXct(   x,   lower = NULL,   upper = NULL,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  assert_posixct(   x,   lower = NULL,   upper = NULL,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  testPOSIXct(   x,   lower = NULL,   upper = NULL,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   null.ok = FALSE )  test_posixct(   x,   lower = NULL,   upper = NULL,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   null.ok = FALSE )  expect_posixct(   x,   lower = NULL,   upper = NULL,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   null.ok = FALSE,   info = NULL,   label = vname(x) )"},{"path":"https://mllg.github.io/checkmate/reference/checkPOSIXct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that an argument is a date/time object in POSIXct format — checkPOSIXct","text":"x [] Object check. lower [Date] non-missing dates x must >= POSIXct time. Must provided timezone x. upper [Date] non-missing dates x must <= POSIXct time. Must provided timezone x. .missing [logical(1)] vectors missing values allowed? Default TRUE. .missing [logical(1)] vectors non-missing values allowed? Default TRUE. Note empty vectors non-missing values. len [integer(1)] Exact expected length x. min.len [integer(1)] Minimal length x. max.len [integer(1)] Maximal length x. unique [logical(1)] Must values unique? Default FALSE. sorted [logical(1)] Elements must sorted ascending order. Missing values ignored. null.ok [logical(1)] set TRUE, x may also NULL. case type check x performed, additional checks disabled. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkPOSIXct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that an argument is a date/time object in POSIXct format — checkPOSIXct","text":"Depending function prefix:  check successful, functions  assertAtomic/assert_atomic return  x invisibly, whereas  checkAtomic/check_atomic  testAtomic/test_atomic return  TRUE.  check successful,  assertAtomic/assert_atomic  throws error message,  testAtomic/test_atomic  returns FALSE,  checkAtomic/check_atomic  return string error message.  function expect_atomic always returns  expectation.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkPathForOutput.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a path is suited for creating an output file — checkPathForOutput","title":"Check if a path is suited for creating an output file — checkPathForOutput","text":"Check file path can used safely create file write . checked: dirname(x) exist? file path x exist? dirname(x) writable? Paths relative current working directory.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkPathForOutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a path is suited for creating an output file — checkPathForOutput","text":"","code":"checkPathForOutput(x, overwrite = FALSE, extension = NULL)  check_path_for_output(x, overwrite = FALSE, extension = NULL)  assertPathForOutput(   x,   overwrite = FALSE,   extension = NULL,   .var.name = vname(x),   add = NULL )  assert_path_for_output(   x,   overwrite = FALSE,   extension = NULL,   .var.name = vname(x),   add = NULL )  testPathForOutput(x, overwrite = FALSE, extension = NULL)  test_path_for_output(x, overwrite = FALSE, extension = NULL)  expect_path_for_output(   x,   overwrite = FALSE,   extension = NULL,   info = NULL,   label = vname(x) )"},{"path":"https://mllg.github.io/checkmate/reference/checkPathForOutput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a path is suited for creating an output file — checkPathForOutput","text":"x [] Object check. overwrite [logical(1)] TRUE, existing file place allowed readable writable. Default FALSE. extension [character(1)] Extension file, e.g. “txt” “tar.gz”. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkPathForOutput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a path is suited for creating an output file — checkPathForOutput","text":"Depending function prefix:  check successful, functions  assertPathForOutput/assert_path_for_output return  x invisibly, whereas  checkPathForOutput/check_path_for_output  testPathForOutput/test_path_for_output return  TRUE.  check successful,  assertPathForOutput/assert_path_for_output  throws error message,  testPathForOutput/test_path_for_output  returns FALSE,  checkPathForOutput/check_path_for_output  return string error message.  function expect_path_for_output always returns  expectation.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkPathForOutput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a path is suited for creating an output file — checkPathForOutput","text":"","code":"# Can we create a file in the tempdir? testPathForOutput(file.path(tempdir(), \"process.log\")) #> [1] TRUE"},{"path":"https://mllg.github.io/checkmate/reference/checkPermutation.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the arguments are permutations of each other. — checkPermutation","title":"Check if the arguments are permutations of each other. — checkPermutation","text":"contrast checkSetEqual, function tests true permutation two vectors also considers duplicated values. Missing values treated actual values default. work raw values.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkPermutation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the arguments are permutations of each other. — checkPermutation","text":"","code":"checkPermutation(x, y, na.ok = TRUE)  check_permutation(x, y, na.ok = TRUE)  assertPermutation(x, y, na.ok = TRUE, .var.name = vname(x), add = NULL)  assert_permutation(x, y, na.ok = TRUE, .var.name = vname(x), add = NULL)  testPermutation(x, y, na.ok = TRUE)  test_permutation(x, y, na.ok = TRUE)  expect_permutation(x, y, na.ok = TRUE, info = NULL, label = vname(x))"},{"path":"https://mllg.github.io/checkmate/reference/checkPermutation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the arguments are permutations of each other. — checkPermutation","text":"x [] Object check. y [atomic] Vector compare . Atomic vector type raw. na.ok [logical(1)] missing values allowed? Default TRUE. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkPermutation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the arguments are permutations of each other. — checkPermutation","text":"Depending function prefix:  check successful, functions  assertPermutation/assert_permutation return  x invisibly, whereas  checkPermutation/check_permutation  testPermutation/test_permutation return  TRUE.  check successful,  assertPermutation/assert_permutation  throws error message,  testPermutation/test_permutation  returns FALSE,  checkPermutation/check_permutation  return string error message.  function expect_permutation always returns  expectation.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkPermutation.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Check if the arguments are permutations of each other. — checkPermutation","text":"object x must type set w.r.t. typeof. Integers doubles treated numeric.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkPermutation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if the arguments are permutations of each other. — checkPermutation","text":"","code":"testPermutation(letters[1:2], letters[2:1]) #> [1] TRUE testPermutation(letters[c(1, 1, 2)], letters[1:2]) #> [1] FALSE testPermutation(c(NA, 1, 2), c(1, 2, NA)) #> [1] TRUE testPermutation(c(NA, 1, 2), c(1, 2, NA), na.ok = FALSE) #> [1] FALSE"},{"path":"https://mllg.github.io/checkmate/reference/checkR6.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is an R6 class — checkR6","title":"Check if an argument is an R6 class — checkR6","text":"Check argument R6 class","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkR6.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is an R6 class — checkR6","text":"","code":"checkR6(   x,   classes = NULL,   ordered = FALSE,   cloneable = NULL,   public = NULL,   private = NULL,   null.ok = FALSE )  check_r6(   x,   classes = NULL,   ordered = FALSE,   cloneable = NULL,   public = NULL,   private = NULL,   null.ok = FALSE )  assertR6(   x,   classes = NULL,   ordered = FALSE,   cloneable = NULL,   public = NULL,   private = NULL,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  assert_r6(   x,   classes = NULL,   ordered = FALSE,   cloneable = NULL,   public = NULL,   private = NULL,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  testR6(   x,   classes = NULL,   ordered = FALSE,   cloneable = NULL,   public = NULL,   private = NULL,   null.ok = FALSE )  test_r6(   x,   classes = NULL,   ordered = FALSE,   cloneable = NULL,   public = NULL,   private = NULL,   null.ok = FALSE )  expect_r6(   x,   classes = NULL,   ordered = FALSE,   cloneable = NULL,   public = NULL,   private = NULL,   null.ok = FALSE,   info = NULL,   label = vname(x) )"},{"path":"https://mllg.github.io/checkmate/reference/checkR6.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is an R6 class — checkR6","text":"x [] Object check. classes [character] Class names check inheritance inherits. x must inherit specified classes. ordered [logical(1)] Expect x specialized provided order. Default FALSE. cloneable [logical(1)] TRUE, check x clone method. FALSE, ensure x cloneable. public [character] Names expected public slots. includes active bindings. private [character] Names expected private slots. null.ok [logical(1)] set TRUE, x may also NULL. case type check x performed, additional checks disabled. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkR6.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is an R6 class — checkR6","text":"Depending function prefix:  check successful, functions  assertClass/assert_class return  x invisibly, whereas  checkClass/check_class  testClass/test_class return  TRUE.  check successful,  assertClass/assert_class  throws error message,  testClass/test_class  returns FALSE,  checkClass/check_class  return string error message.  function expect_class always returns  expectation.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkR6.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is an R6 class — checkR6","text":"","code":"library(R6) generator = R6Class(\"Bar\",   public = list(a = 5),   private = list(b = 42),   active = list(c = function() 99) ) x = generator$new() checkR6(x, \"Bar\", cloneable = TRUE, public = \"a\") #> [1] TRUE"},{"path":"https://mllg.github.io/checkmate/reference/checkRaw.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is a raw vector — checkRaw","title":"Check if an argument is a raw vector — checkRaw","text":"Check argument raw vector","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkRaw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is a raw vector — checkRaw","text":"","code":"checkRaw(   x,   len = NULL,   min.len = NULL,   max.len = NULL,   names = NULL,   null.ok = FALSE )  check_raw(   x,   len = NULL,   min.len = NULL,   max.len = NULL,   names = NULL,   null.ok = FALSE )  assertRaw(   x,   len = NULL,   min.len = NULL,   max.len = NULL,   names = NULL,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  assert_raw(   x,   len = NULL,   min.len = NULL,   max.len = NULL,   names = NULL,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  testRaw(   x,   len = NULL,   min.len = NULL,   max.len = NULL,   names = NULL,   null.ok = FALSE )  test_raw(   x,   len = NULL,   min.len = NULL,   max.len = NULL,   names = NULL,   null.ok = FALSE )  expect_raw(   x,   len = NULL,   min.len = NULL,   max.len = NULL,   names = NULL,   null.ok = FALSE,   info = NULL,   label = vname(x) )"},{"path":"https://mllg.github.io/checkmate/reference/checkRaw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is a raw vector — checkRaw","text":"x [] Object check. len [integer(1)] Exact expected length x. min.len [integer(1)] Minimal length x. max.len [integer(1)] Maximal length x. names [character(1)] Check names. See checkNamed possible values. Default “” performs check . Note can use checkSubset check specific set names. null.ok [logical(1)] set TRUE, x may also NULL. case type check x performed, additional checks disabled. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkRaw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is a raw vector — checkRaw","text":"Depending function prefix:  check successful, functions  assertRaw/assert_raw return  x invisibly, whereas  checkRaw/check_raw  testRaw/test_raw return  TRUE.  check successful,  assertRaw/assert_raw  throws error message,  testRaw/test_raw  returns FALSE,  checkRaw/check_raw  return string error message.  function expect_raw always returns  expectation.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkRaw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is a raw vector — checkRaw","text":"","code":"testRaw(as.raw(2), min.len = 1L) #> [1] TRUE"},{"path":"https://mllg.github.io/checkmate/reference/checkScalar.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is a single atomic value — checkScalar","title":"Check if an argument is a single atomic value — checkScalar","text":"Check argument single atomic value","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkScalar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is a single atomic value — checkScalar","text":"","code":"checkScalar(x, na.ok = FALSE, null.ok = FALSE)  check_scalar(x, na.ok = FALSE, null.ok = FALSE)  assertScalar(   x,   na.ok = FALSE,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  assert_scalar(   x,   na.ok = FALSE,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  testScalar(x, na.ok = FALSE, null.ok = FALSE)  test_scalar(x, na.ok = FALSE, null.ok = FALSE)  expect_scalar(x, na.ok = FALSE, null.ok = FALSE, info = NULL, label = vname(x))"},{"path":"https://mllg.github.io/checkmate/reference/checkScalar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is a single atomic value — checkScalar","text":"x [] Object check. na.ok [logical(1)] missing values allowed? Default FALSE. null.ok [logical(1)] set TRUE, x may also NULL. case type check x performed, additional checks disabled. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkScalar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is a single atomic value — checkScalar","text":"Depending function prefix:  check successful, functions  assertScalar/assert_scalar return  x invisibly, whereas  checkScalar/check_scalar  testScalar/test_scalar return  TRUE.  check successful,  assertScalar/assert_scalar  throws error message,  testScalar/test_scalar  returns FALSE,  checkScalar/check_scalar  return string error message.  function expect_scalar always returns  expectation.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkScalar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if an argument is a single atomic value — checkScalar","text":"function distinguish NA, NA_integer_, NA_real_, NA_complex_ NA_character_ NaN.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkScalar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is a single atomic value — checkScalar","text":"","code":"testScalar(1) #> [1] TRUE testScalar(1:10) #> [1] FALSE"},{"path":"https://mllg.github.io/checkmate/reference/checkScalarNA.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is a single missing value — checkScalarNA","title":"Check if an argument is a single missing value — checkScalarNA","text":"Check argument single missing value","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkScalarNA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is a single missing value — checkScalarNA","text":"","code":"checkScalarNA(x, null.ok = FALSE)  check_scalar_na(x, null.ok = FALSE)  assertScalarNA(x, null.ok = FALSE, .var.name = vname(x), add = NULL)  assert_scalar_na(x, null.ok = FALSE, .var.name = vname(x), add = NULL)  testScalarNA(x, null.ok = FALSE)  test_scalar_na(x, null.ok = FALSE)  expect_scalar_na(x, null.ok = FALSE, info = NULL, label = vname(x))"},{"path":"https://mllg.github.io/checkmate/reference/checkScalarNA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is a single missing value — checkScalarNA","text":"x [] Object check. null.ok [logical(1)] set TRUE, x may also NULL. case type check x performed, additional checks disabled. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkScalarNA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is a single missing value — checkScalarNA","text":"Depending function prefix:  check successful, functions  assertScalarNA/assert_scalar_na return  x invisibly, whereas  checkScalarNA/check_scalar_na  testScalarNA/test_scalar_na return  TRUE.  check successful,  assertScalarNA/assert_scalar_na  throws error message,  testScalarNA/test_scalar_na  returns FALSE,  checkScalarNA/check_scalar_na  return string error message.  function expect_scalar_na always returns  expectation.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkScalarNA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is a single missing value — checkScalarNA","text":"","code":"testScalarNA(1) #> [1] FALSE testScalarNA(NA_real_) #> [1] TRUE testScalarNA(rep(NA, 2)) #> [1] FALSE"},{"path":"https://mllg.github.io/checkmate/reference/checkSetEqual.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is equal to a given set — checkSetEqual","title":"Check if an argument is equal to a given set — checkSetEqual","text":"Check argument equal given set","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkSetEqual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is equal to a given set — checkSetEqual","text":"","code":"checkSetEqual(x, y, ordered = FALSE, fmatch = FALSE)  check_set_equal(x, y, ordered = FALSE, fmatch = FALSE)  assertSetEqual(   x,   y,   ordered = FALSE,   fmatch = FALSE,   .var.name = vname(x),   add = NULL )  assert_set_equal(   x,   y,   ordered = FALSE,   fmatch = FALSE,   .var.name = vname(x),   add = NULL )  testSetEqual(x, y, ordered = FALSE, fmatch = FALSE)  test_set_equal(x, y, ordered = FALSE, fmatch = FALSE)  expect_set_equal(   x,   y,   ordered = FALSE,   fmatch = FALSE,   info = NULL,   label = vname(x) )"},{"path":"https://mllg.github.io/checkmate/reference/checkSetEqual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is equal to a given set — checkSetEqual","text":"x [] Object check. y [atomic] Set compare . ordered [logical(1)] Check x length order y, .e. check using “==” handling NAs nicely. Default FALSE. fmatch [logical(1)] Use set operations implemented fmatch package fastmatch. fastmatch installed, silently falls back match. fmatch modifies y reference: hash table added attribute used subsequent calls. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkSetEqual.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is equal to a given set — checkSetEqual","text":"Depending function prefix:  check successful, functions  assertSubset/assert_subset return  x invisibly, whereas  checkSubset/check_subset  testSubset/test_subset return  TRUE.  check successful,  assertSubset/assert_subset  throws error message,  testSubset/test_subset  returns FALSE,  checkSubset/check_subset  return string error message.  function expect_subset always returns  expectation.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkSetEqual.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Check if an argument is equal to a given set — checkSetEqual","text":"object x must type set w.r.t. typeof. Integers doubles treated numeric.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkSetEqual.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is equal to a given set — checkSetEqual","text":"","code":"testSetEqual(c(\"a\", \"b\"), c(\"a\", \"b\")) #> [1] TRUE testSetEqual(1:3, 1:4) #> [1] FALSE  # x is not converted before the comparison (except for numerics) testSetEqual(factor(\"a\"), \"a\") #> [1] FALSE testSetEqual(1, \"1\") #> [1] FALSE testSetEqual(1, as.integer(1)) #> [1] TRUE"},{"path":"https://mllg.github.io/checkmate/reference/checkString.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is a string — checkString","title":"Check if an argument is a string — checkString","text":"string defined scalar character vector. check vectors arbitrary length, see checkCharacter.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkString.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is a string — checkString","text":"","code":"checkString(   x,   na.ok = FALSE,   n.chars = NULL,   min.chars = NULL,   max.chars = NULL,   pattern = NULL,   fixed = NULL,   ignore.case = FALSE,   null.ok = FALSE )  check_string(   x,   na.ok = FALSE,   n.chars = NULL,   min.chars = NULL,   max.chars = NULL,   pattern = NULL,   fixed = NULL,   ignore.case = FALSE,   null.ok = FALSE )  assertString(   x,   na.ok = FALSE,   n.chars = NULL,   min.chars = NULL,   max.chars = NULL,   pattern = NULL,   fixed = NULL,   ignore.case = FALSE,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  assert_string(   x,   na.ok = FALSE,   n.chars = NULL,   min.chars = NULL,   max.chars = NULL,   pattern = NULL,   fixed = NULL,   ignore.case = FALSE,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  testString(   x,   na.ok = FALSE,   n.chars = NULL,   min.chars = NULL,   max.chars = NULL,   pattern = NULL,   fixed = NULL,   ignore.case = FALSE,   null.ok = FALSE )  test_string(   x,   na.ok = FALSE,   n.chars = NULL,   min.chars = NULL,   max.chars = NULL,   pattern = NULL,   fixed = NULL,   ignore.case = FALSE,   null.ok = FALSE )  expect_string(   x,   na.ok = FALSE,   n.chars = NULL,   min.chars = NULL,   max.chars = NULL,   pattern = NULL,   fixed = NULL,   ignore.case = FALSE,   null.ok = FALSE,   info = NULL,   label = vname(x) )"},{"path":"https://mllg.github.io/checkmate/reference/checkString.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is a string — checkString","text":"x [] Object check. na.ok [logical(1)] missing values allowed? Default FALSE. n.chars [integer(1)] Exact number characters element x. min.chars [integer(1)] Minimum number characters element x. max.chars [integer(1)] Maximum number characters element x. pattern [character(1L)] Regular expression used grepl. non-missing elements x must comply pattern. fixed [character(1)] Substring detect x. used pattern grepl option fixed set TRUE. non-missing elements x must contain substring. ignore.case [logical(1)] See grepl. Default FALSE. null.ok [logical(1)] set TRUE, x may also NULL. case type check x performed, additional checks disabled. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkString.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is a string — checkString","text":"Depending function prefix:  check successful, functions  assertString/assert_string return  x invisibly, whereas  checkString/check_string  testString/test_string return  TRUE.  check successful,  assertString/assert_string  throws error message,  testString/test_string  returns FALSE,  checkString/check_string  return string error message.  function expect_string always returns  expectation.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkString.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if an argument is a string — checkString","text":"function distinguish NA, NA_integer_, NA_real_, NA_complex_ NA_character_ NaN.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkString.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is a string — checkString","text":"","code":"testString(\"a\") #> [1] TRUE testString(letters) #> [1] FALSE"},{"path":"https://mllg.github.io/checkmate/reference/checkSubset.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is a subset of a given set — checkSubset","title":"Check if an argument is a subset of a given set — checkSubset","text":"Check argument subset given set","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkSubset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is a subset of a given set — checkSubset","text":"","code":"checkSubset(x, choices, empty.ok = TRUE, fmatch = FALSE)  check_subset(x, choices, empty.ok = TRUE, fmatch = FALSE)  assertSubset(   x,   choices,   empty.ok = TRUE,   fmatch = FALSE,   .var.name = vname(x),   add = NULL )  assert_subset(   x,   choices,   empty.ok = TRUE,   fmatch = FALSE,   .var.name = vname(x),   add = NULL )  testSubset(x, choices, empty.ok = TRUE, fmatch = FALSE)  test_subset(x, choices, empty.ok = TRUE, fmatch = FALSE)  expect_subset(   x,   choices,   empty.ok = TRUE,   fmatch = FALSE,   info = NULL,   label = vname(x) )"},{"path":"https://mllg.github.io/checkmate/reference/checkSubset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is a subset of a given set — checkSubset","text":"x [] Object check. choices [atomic] Set possible values. May empty. empty.ok [logical(1)] Treat zero-length x subset set choices (includes NULL)? Default TRUE. fmatch [logical(1)] Use set operations implemented fmatch package fastmatch. fastmatch installed, silently falls back match. fmatch modifies y reference: hash table added attribute used subsequent calls. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkSubset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is a subset of a given set — checkSubset","text":"Depending function prefix:  check successful, functions  assertSubset/assert_subset return  x invisibly, whereas  checkSubset/check_subset  testSubset/test_subset return  TRUE.  check successful,  assertSubset/assert_subset  throws error message,  testSubset/test_subset  returns FALSE,  checkSubset/check_subset  return string error message.  function expect_subset always returns  expectation.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkSubset.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Check if an argument is a subset of a given set — checkSubset","text":"object x must type set w.r.t. typeof. Integers doubles treated numeric.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkSubset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is a subset of a given set — checkSubset","text":"","code":"testSubset(c(\"a\", \"z\"), letters) #> [1] TRUE testSubset(\"ab\", letters) #> [1] FALSE testSubset(\"Species\", names(iris)) #> [1] TRUE  # x is not converted before the comparison (except for numerics) testSubset(factor(\"a\"), \"a\") #> [1] FALSE testSubset(1, \"1\") #> [1] FALSE testSubset(1, as.integer(1)) #> [1] TRUE"},{"path":"https://mllg.github.io/checkmate/reference/checkTRUE.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is TRUE — checkTRUE","title":"Check if an argument is TRUE — checkTRUE","text":"Simply checks argument TRUE.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkTRUE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is TRUE — checkTRUE","text":"","code":"checkTRUE(x, na.ok = FALSE)  check_true(x, na.ok = FALSE)  assertTRUE(x, na.ok = FALSE, .var.name = vname(x), add = NULL)  assert_true(x, na.ok = FALSE, .var.name = vname(x), add = NULL)  testTRUE(x, na.ok = FALSE)  test_true(x, na.ok = FALSE)"},{"path":"https://mllg.github.io/checkmate/reference/checkTRUE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is TRUE — checkTRUE","text":"x [] Object check. na.ok [logical(1)] missing values allowed? Default FALSE. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkTRUE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is TRUE — checkTRUE","text":"Depending function prefix:  check successful, functions  assertTRUE./assert_true. return  x invisibly, whereas  checkTRUE./check_true.  testTRUE./test_true. return  TRUE.  check successful,  assertTRUE./assert_true.  throws error message,  testTRUE./test_true.  returns FALSE,  checkTRUE./check_true.  return string error message.  function expect_true. always returns  expectation.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkTRUE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is TRUE — checkTRUE","text":"","code":"testTRUE(TRUE) #> [1] TRUE testTRUE(FALSE) #> [1] FALSE"},{"path":"https://mllg.github.io/checkmate/reference/checkTibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is a tibble — checkTibble","title":"Check if an argument is a tibble — checkTibble","text":"Check argument tibble","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkTibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is a tibble — checkTibble","text":"","code":"checkTibble(   x,   types = character(0L),   any.missing = TRUE,   all.missing = TRUE,   min.rows = NULL,   max.rows = NULL,   min.cols = NULL,   max.cols = NULL,   nrows = NULL,   ncols = NULL,   row.names = NULL,   col.names = NULL,   null.ok = FALSE )  check_tibble(   x,   types = character(0L),   any.missing = TRUE,   all.missing = TRUE,   min.rows = NULL,   max.rows = NULL,   min.cols = NULL,   max.cols = NULL,   nrows = NULL,   ncols = NULL,   row.names = NULL,   col.names = NULL,   null.ok = FALSE )  assertTibble(   x,   types = character(0L),   any.missing = TRUE,   all.missing = TRUE,   min.rows = NULL,   max.rows = NULL,   min.cols = NULL,   max.cols = NULL,   nrows = NULL,   ncols = NULL,   row.names = NULL,   col.names = NULL,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  assert_tibble(   x,   types = character(0L),   any.missing = TRUE,   all.missing = TRUE,   min.rows = NULL,   max.rows = NULL,   min.cols = NULL,   max.cols = NULL,   nrows = NULL,   ncols = NULL,   row.names = NULL,   col.names = NULL,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  testTibble(   x,   types = character(0L),   any.missing = TRUE,   all.missing = TRUE,   min.rows = NULL,   max.rows = NULL,   min.cols = NULL,   max.cols = NULL,   nrows = NULL,   ncols = NULL,   row.names = NULL,   col.names = NULL,   null.ok = FALSE )  test_tibble(   x,   types = character(0L),   any.missing = TRUE,   all.missing = TRUE,   min.rows = NULL,   max.rows = NULL,   min.cols = NULL,   max.cols = NULL,   nrows = NULL,   ncols = NULL,   row.names = NULL,   col.names = NULL,   null.ok = FALSE )  expect_tibble(   x,   types = character(0L),   any.missing = TRUE,   all.missing = TRUE,   min.rows = NULL,   max.rows = NULL,   min.cols = NULL,   max.cols = NULL,   nrows = NULL,   ncols = NULL,   row.names = NULL,   col.names = NULL,   null.ok = FALSE,   info = NULL,   label = vname(x) )"},{"path":"https://mllg.github.io/checkmate/reference/checkTibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is a tibble — checkTibble","text":"x [] Object check. types [character] Character vector class names. list element must inherit least one provided types. types “logical”, “integer”, “integerish”, “double”, “numeric”, “complex”, “character”, “factor”, “atomic”, “vector” “atomicvector”, “array”, “matrix”, “list”, “function”, “environment” “null” supported. types inherits used fallback check x's inheritance. Defaults character(0) (check). .missing [logical(1)] missing values allowed? Default TRUE. .missing [logical(1)] matrices missing values allowed? Default TRUE. min.rows [integer(1)] Minimum number rows. max.rows [integer(1)] Maximum number rows. min.cols [integer(1)] Minimum number columns. max.cols [integer(1)] Maximum number columns. nrows [integer(1)] Exact number rows. ncols [integer(1)] Exact number columns. row.names [character(1)] Check row names. Default “NULL” (check). See checkNamed possible values. Note can use checkSubset check specific set names. col.names [character(1)] Check column names. Default “NULL” (check). See checkNamed possible values. Note can use checkSubset test specific set names. null.ok [logical(1)] set TRUE, x may also NULL. case type check x performed, additional checks disabled. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkTibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is a tibble — checkTibble","text":"Depending function prefix:  check successful, functions  assertTibble/assert_tibble return  x invisibly, whereas  checkTibble/check_tibble  testTibble/test_tibble return  TRUE.  check successful,  assertTibble/assert_tibble  throws error message,  testTibble/test_tibble  returns FALSE,  checkTibble/check_tibble  return string error message.  function expect_tibble always returns  expectation.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkTibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is a tibble — checkTibble","text":"","code":"library(tibble) x = as_tibble(iris) testTibble(x) #> [1] TRUE testTibble(x, nrow = 150, any.missing = FALSE) #> [1] TRUE"},{"path":"https://mllg.github.io/checkmate/reference/checkVector.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is a vector — checkVector","title":"Check if an argument is a vector — checkVector","text":"Check argument vector","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkVector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is a vector — checkVector","text":"","code":"checkVector(   x,   strict = FALSE,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL,   null.ok = FALSE )  check_vector(   x,   strict = FALSE,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL,   null.ok = FALSE )  assertVector(   x,   strict = FALSE,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  assert_vector(   x,   strict = FALSE,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL,   null.ok = FALSE,   .var.name = vname(x),   add = NULL )  testVector(   x,   strict = FALSE,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL,   null.ok = FALSE )  test_vector(   x,   strict = FALSE,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   names = NULL,   null.ok = FALSE )"},{"path":"https://mllg.github.io/checkmate/reference/checkVector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is a vector — checkVector","text":"x [] Object check. strict [logical(1)] May vector additional attributes? TRUE, mimics behavior .vector. Default FALSE allows e.g. factors data.frames recognized vectors. .missing [logical(1)] vectors missing values allowed? Default TRUE. .missing [logical(1)] vectors non-missing values allowed? Default TRUE. Note empty vectors non-missing values. len [integer(1)] Exact expected length x. min.len [integer(1)] Minimal length x. max.len [integer(1)] Maximal length x. unique [logical(1)] Must values unique? Default FALSE. names [character(1)] Check names. See checkNamed possible values. Default “” performs check . Note can use checkSubset check specific set names. null.ok [logical(1)] set TRUE, x may also NULL. case type check x performed, additional checks disabled. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkVector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is a vector — checkVector","text":"Depending function prefix:  check successful, functions  assertVector/assert_vector return  x invisibly, whereas  checkVector/check_vector  testVector/test_vector return  TRUE.  check successful,  assertVector/assert_vector  throws error message,  testVector/test_vector  returns FALSE,  checkVector/check_vector  return string error message.  function expect_vector always returns  expectation.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkVector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is a vector — checkVector","text":"","code":"testVector(letters, min.len = 1L, any.missing = FALSE) #> [1] TRUE"},{"path":"https://mllg.github.io/checkmate/reference/checkmate-package.html","id":null,"dir":"Reference","previous_headings":"","what":"checkmate: Fast and Versatile Argument Checks — checkmate-package","title":"checkmate: Fast and Versatile Argument Checks — checkmate-package","text":"Tests assertions perform frequent argument checks. substantial part package written C minimize worries execution time overhead.","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkmate-package.html","id":"check-scalars","dir":"Reference","previous_headings":"","what":"Check scalars","title":"checkmate: Fast and Versatile Argument Checks — checkmate-package","text":"checkFlag checkCount checkNumber checkInt checkString checkScalar checkScalarNA","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkmate-package.html","id":"check-vectors","dir":"Reference","previous_headings":"","what":"Check vectors","title":"checkmate: Fast and Versatile Argument Checks — checkmate-package","text":"checkLogical checkNumeric checkDouble checkInteger checkIntegerish checkCharacter checkComplex checkFactor checkList checkPOSIXct checkVector checkAtomic checkAtomicVector checkRaw","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkmate-package.html","id":"check-attributes","dir":"Reference","previous_headings":"","what":"Check attributes","title":"checkmate: Fast and Versatile Argument Checks — checkmate-package","text":"checkClass checkMultiClass checkNames checkNamed (deprecated)","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkmate-package.html","id":"check-compound-types","dir":"Reference","previous_headings":"","what":"Check compound types","title":"checkmate: Fast and Versatile Argument Checks — checkmate-package","text":"checkArray checkDataFrame checkMatrix","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkmate-package.html","id":"check-other-built-in-r-types","dir":"Reference","previous_headings":"","what":"Check other built-in R types","title":"checkmate: Fast and Versatile Argument Checks — checkmate-package","text":"checkDate checkEnvironment checkFunction checkFormula checkNull","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkmate-package.html","id":"check-sets","dir":"Reference","previous_headings":"","what":"Check sets","title":"checkmate: Fast and Versatile Argument Checks — checkmate-package","text":"checkChoice checkSubset checkSetEqual checkDisjunct checkPermutation","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkmate-package.html","id":"file-io","dir":"Reference","previous_headings":"","what":"File IO","title":"checkmate: Fast and Versatile Argument Checks — checkmate-package","text":"checkFileExists checkDirectoryExists checkPathForOutput checkAccess","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkmate-package.html","id":"popular-data-types-of-third-party-packages","dir":"Reference","previous_headings":"","what":"Popular data types of third party packages","title":"checkmate: Fast and Versatile Argument Checks — checkmate-package","text":"checkDataTable checkR6 checkTibble","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkmate-package.html","id":"safe-coercion-to-integer","dir":"Reference","previous_headings":"","what":"Safe coercion to integer","title":"checkmate: Fast and Versatile Argument Checks — checkmate-package","text":"asCount asInt asInteger","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkmate-package.html","id":"quick-argument-checks-using-a-dsl","dir":"Reference","previous_headings":"","what":"Quick argument checks using a DSL","title":"checkmate: Fast and Versatile Argument Checks — checkmate-package","text":"qassert qassertr","code":""},{"path":"https://mllg.github.io/checkmate/reference/checkmate-package.html","id":"misc","dir":"Reference","previous_headings":"","what":"Misc","title":"checkmate: Fast and Versatile Argument Checks — checkmate-package","text":"checkOS (check operating system) assert (combine multiple checks assertion) anyMissing allMissing anyNaN wf (.first .last)","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/checkmate-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"checkmate: Fast and Versatile Argument Checks — checkmate-package","text":"Maintainer: Michel Lang michellang@gmail.com (ORCID) contributors: Bernd Bischl bernd_bischl@gmx.net [contributor] Dénes Tóth toth.denes@kogentum.hu (ORCID) [contributor]","code":""},{"path":"https://mllg.github.io/checkmate/reference/coalesce.html","id":null,"dir":"Reference","previous_headings":"","what":"Coalesce operator — %??%","title":"Coalesce operator — %??%","text":"Returns left hand side missing NULL, right hand side otherwise.","code":""},{"path":"https://mllg.github.io/checkmate/reference/coalesce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coalesce operator — %??%","text":"","code":"lhs %??% rhs"},{"path":"https://mllg.github.io/checkmate/reference/coalesce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coalesce operator — %??%","text":"lhs [] Left hand side operator. returned missing NULL. rhs [] Right hand side operator. returned lhs missing NULL.","code":""},{"path":"https://mllg.github.io/checkmate/reference/coalesce.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coalesce operator — %??%","text":"Either lhs rhs.","code":""},{"path":"https://mllg.github.io/checkmate/reference/coalesce.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coalesce operator — %??%","text":"","code":"print(NULL %??% 1 %??% 2) #> [1] 1 print(names(iris) %??% letters[seq_len(ncol(iris))]) #> [1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\""},{"path":"https://mllg.github.io/checkmate/reference/makeAssertion.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn a Check into an Assertion — makeAssertion","title":"Turn a Check into an Assertion — makeAssertion","text":"makeAssertion internal function used evaluate result check throw exception necessary. makeAssertionFunction can used automatically create assertion function based check function (see example).","code":""},{"path":"https://mllg.github.io/checkmate/reference/makeAssertion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn a Check into an Assertion — makeAssertion","text":"","code":"makeAssertion(x, res, var.name, collection)  makeAssertionFunction(   check.fun,   c.fun = NULL,   use.namespace = TRUE,   coerce = FALSE,   env = parent.frame() )"},{"path":"https://mllg.github.io/checkmate/reference/makeAssertion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn a Check into an Assertion — makeAssertion","text":"x [] Object check. res [TRUE | character(1)] result check function: TRUE successful checks, error message string otherwise. var.name [character(1)] custom name x passed assert* function. Defaults heuristic name lookup. collection [AssertCollection] AssertCollection provided, error message stored . NULL, exception raised res TRUE. check.fun [function] Function checks input. Must return TRUE success string error message otherwise. c.fun [character(1)] NULL, instead calling function check.fun, use .Call call C function “c.fun” identical set parameters. C function must registered native symbol, see .Call. Useful check.fun just simple wrapper. use.namespace [logical(1)] Call functions checkmate using namespace explicitly. Can set FALSE save microseconds, checkmate package needs imported. Default TRUE. coerce [logical(1)] TRUE, injects lines code convert numeric values integer successful assertion. Currently used assertCount, assertInt assertIntegerish. env [environment] environment created function. Default parent.frame.","code":""},{"path":"https://mllg.github.io/checkmate/reference/makeAssertion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn a Check into an Assertion — makeAssertion","text":"makeAssertion invisibly returns checked object check successful,  exception raised (message stored collection) otherwise.  makeAssertionFunction returns function.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/makeAssertion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn a Check into an Assertion — makeAssertion","text":"","code":"# Simple custom check function checkFalse = function(x) if (!identical(x, FALSE)) \"Must be FALSE\" else TRUE  # Create the respective assert function assertFalse = function(x, .var.name = vname(x), add = NULL) {   res = checkFalse(x)   makeAssertion(x, res, .var.name, add) }  # Alternative: Automatically create such a function assertFalse = makeAssertionFunction(checkFalse) print(assertFalse) #> function (x, .var.name = checkmate::vname(x), add = NULL)  #> { #>     if (missing(x))  #>         stop(sprintf(\"argument \\\"%s\\\" is missing, with no default\",  #>             .var.name)) #>     res = checkFalse(x) #>     checkmate::makeAssertion(x, res, .var.name, add) #> } #> <environment: 0x565508323f20>"},{"path":"https://mllg.github.io/checkmate/reference/makeExpectation.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn a Check into an Expectation — makeExpectation","title":"Turn a Check into an Expectation — makeExpectation","text":"makeExpectation internal function used evaluate result check turn expectation. makeExceptionFunction can used automatically create expectation function based check function (see example).","code":""},{"path":"https://mllg.github.io/checkmate/reference/makeExpectation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn a Check into an Expectation — makeExpectation","text":"","code":"makeExpectation(x, res, info, label)  makeExpectationFunction(   check.fun,   c.fun = NULL,   use.namespace = FALSE,   env = parent.frame() )"},{"path":"https://mllg.github.io/checkmate/reference/makeExpectation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn a Check into an Expectation — makeExpectation","text":"x [] Object check. res [TRUE | character(1)] result check function: TRUE successful checks, error message string otherwise. info [character(1)] See expect_that label [character(1)] See expect_that check.fun [function] Function checks input. Must return TRUE success string error message otherwise. c.fun [character(1)] NULL, instead calling function check.fun, use .Call call C function “c.fun” identical set parameters. C function must registered native symbol, see .Call. Useful check.fun just simple wrapper. use.namespace [logical(1)] Call functions checkmate using namespace explicitly. Can set FALSE save microseconds, checkmate package needs imported. Default TRUE. env [environment] environment created function. Default parent.frame.","code":""},{"path":"https://mllg.github.io/checkmate/reference/makeExpectation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn a Check into an Expectation — makeExpectation","text":"makeExpectation invisibly returns checked object.   makeExpectationFunction returns function.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/makeExpectation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn a Check into an Expectation — makeExpectation","text":"","code":"# Simple custom check function checkFalse = function(x) if (!identical(x, FALSE)) \"Must be FALSE\" else TRUE  # Create the respective expect function expect_false = function(x, info = NULL, label = vname(x)) {   res = checkFalse(x)   makeExpectation(x, res, info = info, label = label) }  # Alternative: Automatically create such a function expect_false = makeExpectationFunction(checkFalse) print(expect_false) #> function (x, info = NULL, label = vname(x))  #> { #>     if (missing(x))  #>         stop(sprintf(\"Argument '%s' is missing\", label)) #>     res = checkFalse(x) #>     makeExpectation(x, res, info, label) #> } #> <environment: 0x5655082d8370>"},{"path":"https://mllg.github.io/checkmate/reference/makeTest.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn a Check into a Test — makeTest","title":"Turn a Check into a Test — makeTest","text":"makeTest internal function used evaluate result check throw exception necessary. function currently stub just calls isTRUE. makeTestFunction can used automatically create assertion function based check function (see example).","code":""},{"path":"https://mllg.github.io/checkmate/reference/makeTest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn a Check into a Test — makeTest","text":"","code":"makeTest(res)  makeTestFunction(check.fun, c.fun = NULL, env = parent.frame())"},{"path":"https://mllg.github.io/checkmate/reference/makeTest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn a Check into a Test — makeTest","text":"res [TRUE | character(1)] result check function: TRUE successful checks, error message string otherwise. check.fun [function] Function checks input. Must return TRUE success string error message otherwise. c.fun [character(1)] NULL, instead calling function check.fun, use .Call call C function “c.fun” identical set parameters. C function must registered native symbol, see .Call. Useful check.fun just simple wrapper. env [environment] environment created function. Default parent.frame.","code":""},{"path":"https://mllg.github.io/checkmate/reference/makeTest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn a Check into a Test — makeTest","text":"makeTest returns TRUE check successful FALSE otherwise.  makeTestFunction returns function.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/makeTest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn a Check into a Test — makeTest","text":"","code":"# Simple custom check function checkFalse = function(x) if (!identical(x, FALSE)) \"Must be FALSE\" else TRUE  # Create the respective test function testFalse = function(x) {   res = checkFalse(x)   makeTest(res) }  # Alternative: Automatically create such a function testFalse = makeTestFunction(checkFalse) print(testFalse) #> function (x)  #> { #>     isTRUE(checkFalse(x)) #> } #> <environment: 0x565508572f88>"},{"path":"https://mllg.github.io/checkmate/reference/matchArg.html","id":null,"dir":"Reference","previous_headings":"","what":"Partial Argument Matching — matchArg","title":"Partial Argument Matching — matchArg","text":"extensions match.arg support AssertCollection. behavior similar match.arg, except NULL valid value x.","code":""},{"path":"https://mllg.github.io/checkmate/reference/matchArg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partial Argument Matching — matchArg","text":"","code":"matchArg(x, choices, several.ok = FALSE, .var.name = vname(x), add = NULL)"},{"path":"https://mllg.github.io/checkmate/reference/matchArg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partial Argument Matching — matchArg","text":"x [character] User provided argument match. choices [character()] Candidates match x . several.ok [logical(1)] TRUE, multiple matches allowed, cf. match.arg. .var.name [character(1)] Name checked object print error messages. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertions. See AssertCollection.","code":""},{"path":"https://mllg.github.io/checkmate/reference/matchArg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Partial Argument Matching — matchArg","text":"Subset choices.","code":""},{"path":"https://mllg.github.io/checkmate/reference/matchArg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Partial Argument Matching — matchArg","text":"","code":"matchArg(\"k\", choices = c(\"kendall\", \"pearson\")) #> [1] \"kendall\""},{"path":"https://mllg.github.io/checkmate/reference/qassert.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick argument checks on (builtin) R types — qassert","title":"Quick argument checks on (builtin) R types — qassert","text":"provided functions parse rules allow express frequent argument checks typing just letters.","code":""},{"path":"https://mllg.github.io/checkmate/reference/qassert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick argument checks on (builtin) R types — qassert","text":"","code":"qassert(x, rules, .var.name = vname(x))  qtest(x, rules)  qexpect(x, rules, info = NULL, label = vname(x))"},{"path":"https://mllg.github.io/checkmate/reference/qassert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick argument checks on (builtin) R types — qassert","text":"x [] Object check. rules [character] Set rules. See details. .var.name [character(1)] Name checked object print error messages. Defaults heuristic implemented vname. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/qassert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quick argument checks on (builtin) R types — qassert","text":"qassert throws R exception object x  comply least one rules returns tested object invisibly  otherwise.  qtest behaves way returns FALSE none  rules comply.  qexpect intended inside unit test framework testthat  returns expectation.","code":""},{"path":"https://mllg.github.io/checkmate/reference/qassert.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quick argument checks on (builtin) R types — qassert","text":"rule specified three parts. Class missingness check.    first letter abbreviation class.    provided uppercase, missing values prohibited.    Supported abbreviations: Length definition. can one Range check two numbers separated comma, enclosed square brackets    (endpoint included) parentheses (endpoint excluded).    example, “[0, 3)” results (x >= 0 & x < 3).    lower upper bound may omitted equivalent negative    positive infinite bound, respectively.    definition [0,] contains Inf, [0,) .    holds left (lower) boundary -Inf.    E.g., rule “N1()” checks single finite numeric NA,    “N1[)” allows -Inf.","code":""},{"path":"https://mllg.github.io/checkmate/reference/qassert.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Quick argument checks on (builtin) R types — qassert","text":"functions inspired blog post Bogumił Kamiński: http://rsnippets.blogspot.de/2013/06/testing-function-agruments--gnu-r.html. implementation mostly written C minimize overhead.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/qassert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quick argument checks on (builtin) R types — qassert","text":"","code":"# logical of length 1 qtest(NA, \"b1\") #> [1] TRUE  # logical of length 1, NA not allowed qtest(NA, \"B1\") #> [1] FALSE  # logical of length 0 or 1, NA not allowed qtest(TRUE, \"B?\") #> [1] TRUE  # numeric with length > 0 qtest(runif(10), \"n+\") #> [1] TRUE  # integer with length > 0, NAs not allowed, all integers >= 0 and < Inf qtest(1:3, \"I+[0,)\") #> [1] TRUE  # either an emtpy list or a character vector with <=5 elements qtest(1, c(\"l0\", \"s<=5\")) #> [1] FALSE  # data frame with at least one column and no missing value in any column qtest(iris, \"D+\") #> [1] TRUE"},{"path":"https://mllg.github.io/checkmate/reference/qassertr.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick recursive arguments checks on lists and data frames — qassertr","title":"Quick recursive arguments checks on lists and data frames — qassertr","text":"functions tuned counterparts qtest, qassert qexpect tailored recursive checks list elements data frame columns.","code":""},{"path":"https://mllg.github.io/checkmate/reference/qassertr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick recursive arguments checks on lists and data frames — qassertr","text":"","code":"qassertr(x, rules, .var.name = vname(x))  qtestr(x, rules, depth = 1L)  qexpectr(x, rules, info = NULL, label = vname(x))"},{"path":"https://mllg.github.io/checkmate/reference/qassertr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick recursive arguments checks on lists and data frames — qassertr","text":"x [list data.frame] List data frame check compliance least one rules. See details qtest rule explanation. rules [character] Set rules. See qtest .var.name [character(1)] Name checked object print error messages. Defaults heuristic implemented vname. depth [integer(1)] Maximum recursion depth. Defaults “1” directly check list elements data frame columns. Set higher value check lists lists elements. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://mllg.github.io/checkmate/reference/qassertr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quick recursive arguments checks on lists and data frames — qassertr","text":"See qassert.","code":""},{"path":[]},{"path":"https://mllg.github.io/checkmate/reference/qassertr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quick recursive arguments checks on lists and data frames — qassertr","text":"","code":"# All list elements are integers with length >= 1? qtestr(as.list(1:10), \"i+\") #> [1] TRUE  # All list elements (i.e. data frame columns) are numeric? qtestr(iris, \"n\") #> [1] FALSE  # All list elements are numeric, w/o NAs? qtestr(list(a = 1:3, b = rnorm(1), c = letters), \"N+\") #> [1] FALSE  # All list elements are numeric OR character qtestr(list(a = 1:3, b = rnorm(1), c = letters), c(\"N+\", \"S+\")) #> [1] TRUE"},{"path":"https://mllg.github.io/checkmate/reference/register_test_backend.html","id":null,"dir":"Reference","previous_headings":"","what":"Select Backend for Unit Tests — register_test_backend","title":"Select Backend for Unit Tests — register_test_backend","text":"Allows explicitly select backend unit tests. Currently supported \"testthat\" \"tinytest\". respective package must installed loaded (attached). function explicitly called, defaults \"testthat\" unless \"tinytest\"'s namespace loaded.","code":""},{"path":"https://mllg.github.io/checkmate/reference/register_test_backend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select Backend for Unit Tests — register_test_backend","text":"","code":"register_test_backend(name)"},{"path":"https://mllg.github.io/checkmate/reference/register_test_backend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select Backend for Unit Tests — register_test_backend","text":"name [character(1)]\"testthat\" \"tinytest\".","code":""},{"path":"https://mllg.github.io/checkmate/reference/register_test_backend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select Backend for Unit Tests — register_test_backend","text":"NULL (invisibly).","code":""},{"path":"https://mllg.github.io/checkmate/reference/vname.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup a variable name — vname","title":"Lookup a variable name — vname","text":"Tries heuristically determine variable name x parent frame combination deparse substitute. Used checkmate's error messages.","code":""},{"path":"https://mllg.github.io/checkmate/reference/vname.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup a variable name — vname","text":"","code":"vname(x)"},{"path":"https://mllg.github.io/checkmate/reference/vname.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup a variable name — vname","text":"x [] Object.","code":""},{"path":"https://mllg.github.io/checkmate/reference/vname.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup a variable name — vname","text":"[character(1)] Variable name.","code":""},{"path":"https://mllg.github.io/checkmate/reference/wf.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the index of the first/last TRUE — wf","title":"Get the index of the first/last TRUE — wf","text":"quick C implementation “.first” (head((x), 1)) “.last” (tail((x), 1)).","code":""},{"path":"https://mllg.github.io/checkmate/reference/wf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the index of the first/last TRUE — wf","text":"","code":"wf(x, use.names = TRUE)  wl(x, use.names = TRUE)"},{"path":"https://mllg.github.io/checkmate/reference/wf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the index of the first/last TRUE — wf","text":"x [logical] Logical vector. use.names [logical(1)] TRUE x named, result also named.","code":""},{"path":"https://mllg.github.io/checkmate/reference/wf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the index of the first/last TRUE — wf","text":"[integer(1) | integer(0)].  Returns index first/last TRUE value x  empty integer vector none found. NAs ignored.","code":""},{"path":"https://mllg.github.io/checkmate/reference/wf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the index of the first/last TRUE — wf","text":"","code":"wf(c(FALSE, TRUE)) #> [1] 2 wl(c(FALSE, FALSE)) #> integer(0) wf(NA) #> integer(0)"},{"path":"https://mllg.github.io/checkmate/news/index.html","id":"version-231","dir":"Changelog","previous_headings":"","what":"Version 2.3.1","title":"Version 2.3.1","text":"CRAN release: 2023-12-04 Fixed sortedness check bug numeric vectors NAs (#258).","code":""},{"path":"https://mllg.github.io/checkmate/news/index.html","id":"version-231-1","dir":"Changelog","previous_headings":"","what":"Version 2.3.1","title":"Version 2.3.1","text":"CRAN release: 2023-12-04 Fixed sprintf format string long integers.","code":""},{"path":"https://mllg.github.io/checkmate/news/index.html","id":"version-230","dir":"Changelog","previous_headings":"","what":"Version 2.3.0","title":"Version 2.3.0","text":"CRAN release: 2023-10-25 NULL longer considered atomic future versions R (c.f. https://stat.ethz.ch/pipermail/r-devel/2023-September/082892.html). avoid breaking reverse dependencies, checkmate stick old behavior notice. Fixed warning checkAtomic() (#245).","code":""},{"path":"https://mllg.github.io/checkmate/news/index.html","id":"version-220","dir":"Changelog","previous_headings":"","what":"Version 2.2.0","title":"Version 2.2.0","text":"CRAN release: 2023-04-27 Fixed C compiler warnings windows Added checkPermutation (#230). Better handling long vectors (#231). Fixed bounds check numeric vectors infinite bounds.","code":""},{"path":"https://mllg.github.io/checkmate/news/index.html","id":"version-210","dir":"Changelog","previous_headings":"","what":"Version 2.1.0","title":"Version 2.1.0","text":"CRAN release: 2022-04-21 New arguments n.chars max.chars checkCharacter() checkString(). Checks integerish now compare tolerance difference nearest integer > instead >= allow specifying tolerance exactly 0 (#177). Checks integerish now check class Date POSIXt. Coercion double integer assertInt() assertIntegerish() now round nearest integer instead always rounding via trunc(). Fixed error message wrong variable name reported assert() (#182). Checks POSIXct dates storage mode integer now work instead raising exception (#175). *Matrix() *Array() now allow different storage types one specified values missing (#184). Function assert() now supports collecting assertions via AssertCollection (#112). New exported C function qcheck() (#180). Fixed bug checkFunction(..., ordered = TRUE) (#204). Removed deprecated S macro DOUBLE_EPS C source.","code":""},{"path":"https://mllg.github.io/checkmate/news/index.html","id":"version-200","dir":"Changelog","previous_headings":"","what":"Version 2.0.0","title":"Version 2.0.0","text":"CRAN release: 2020-02-06 Expectations now optionally support package tinytest. tinytest used backend attached, otherwise checkmate defaults testthat. now also vignette setup checkmate tinytest. Coercion now affects double vectors. Improved error message type detection *List. Removed *Bit, bit package orphaned. Fixed documentation.","code":""},{"path":"https://mllg.github.io/checkmate/news/index.html","id":"version-194","dir":"Changelog","previous_headings":"","what":"Version 1.9.4","title":"Version 1.9.4","text":"CRAN release: 2019-07-04 Fixed factors detected integerish. Fixed error message name checks vectors.","code":""},{"path":"https://mllg.github.io/checkmate/news/index.html","id":"version-193","dir":"Changelog","previous_headings":"","what":"Version 1.9.3","title":"Version 1.9.3","text":"CRAN release: 2019-05-03 New argument extension checkPathForOutput() (#162). Fixed handling different NA types set functions (#158). expect_vector removed due nameclash package testthat.","code":""},{"path":"https://mllg.github.io/checkmate/news/index.html","id":"version-192","dir":"Changelog","previous_headings":"","what":"Version 1.9.2","title":"Version 1.9.2","text":"assert*(..., coerce = TRUE) drop names conversion (#157), thanks @mb706. Fixed documentation checkDataFrame (#159), thanks @harvey131. Changed heuristic vname() improve lookup variable names.","code":""},{"path":"https://mllg.github.io/checkmate/news/index.html","id":"version-191","dir":"Changelog","previous_headings":"","what":"Version 1.9.1","title":"Version 1.9.1","text":"CRAN release: 2019-01-15 Fix segfault Solaris Fix warnings reported rchk Fix checking private slots checkR6 (#156)","code":""},{"path":"https://mllg.github.io/checkmate/news/index.html","id":"version-190","dir":"Changelog","previous_headings":"","what":"Version 1.9.0","title":"Version 1.9.0","text":"CRAN release: 2019-01-09 Error messages now provide information error locations, e.g., position first missing element vector. object check missing, assert-functions now give better error message, test-functions always FALSE expect-functions always raise exception. Checks missingness sort order optimized ALTREPs. calling frame reported assertions now identical calling frame reported R’s stop() function (#117). Added checkDouble explicitly check non-integer numerics. Added checkRaw check raw vectors. Added checkFormula check formula objects. Added checkMultiClass check inheritance set candidates Added checkDisjunct check sets disjunct. Added abbreviation \"p\" qassert check POSIXct objects. Added argument coerce assertCount/assert_count, assertInt/assert_int assertIntegerish/assert_integerish optionally coerces x integer successful assertion. supersedes functions asCount, asInt asInteger (#77). Added arguments max.rows max.cols check maximum number rows columns matrices, data.frames, tibbles data.tables. Added argument disjunct.*Names. Fixed error message checkChoice. Fixed *Function work properly Primitives. Fixed *List check missingness broken. Workaround *DataTable detection number rows null data.tables: https://github.com/Rdatatable/data.table/issues/3149","code":""},{"path":"https://mllg.github.io/checkmate/news/index.html","id":"version-185","dir":"Changelog","previous_headings":"","what":"Version 1.8.5","title":"Version 1.8.5","text":"CRAN release: 2017-10-24 Added *POSIXct check POSIXct data-time objects POSIXct format. set functions optionally support package fastmatch now. Argument sorted = TRUE passed ls() anymore support R versions prior v3.2.0.","code":""},{"path":"https://mllg.github.io/checkmate/news/index.html","id":"version-184","dir":"Changelog","previous_headings":"","what":"Version 1.8.4","title":"Version 1.8.4","text":"CRAN release: 2017-09-25 New functions test bit vectors implemented package bit. New functions test R6 classes implemented package R6. Always load (attach) respective namespace checking objects type data.table, tibble, R6 bit. ensures operations work expected check. *Names type=\"unnamed\" now works NULL. New argument must.include *Names. Fixed possible protection stack imbalance reported rchk.","code":""},{"path":"https://mllg.github.io/checkmate/news/index.html","id":"version-183","dir":"Changelog","previous_headings":"","what":"Version 1.8.3","title":"Version 1.8.3","text":"CRAN release: 2017-07-03 New argument sorted (defaults FALSE) *Integer, *Integerish Numeric check ascending order vector elements. New argument null.ok (defaults FALSE) *Choice *Class. *Subset now allows pass empty vectors choices. Improved error message *Choice. set family functions now restrict regarding class, e.g. differentiate factors characters. *Character *String now ignores missing values regular expressions string length checks (using argument min.chars). disallow missing values, set .missing na.ok, respectively. *Date now ignores missing values lower/upper bound checks. disallow missing values, set .missing FALSE. Thanks Beasley (@wibeasley) PR. Package microbenchmark longer strictly required build vignette. installed, output figures missing though.","code":""},{"path":"https://mllg.github.io/checkmate/news/index.html","id":"version-182","dir":"Changelog","previous_headings":"","what":"Version 1.8.2","title":"Version 1.8.2","text":"CRAN release: 2016-11-02 *Matrix *Array now additionally allow check integerish storage type via argument “mode”. Functions *Count, *Int, *Number, *Integer, *Integerish *Numeric accept logical values . checkAtomicVector now restrictive prohibits dimension symbol. Thus, matrix considered atomic vector . Dropped support AssertCollections convert functions (asInt, asInteger asCount). Added checkTibble.","code":""},{"path":"https://mllg.github.io/checkmate/news/index.html","id":"version-181","dir":"Changelog","previous_headings":"","what":"Version 1.8.1","title":"Version 1.8.1","text":"CRAN release: 2016-06-28 Function test_file longer exported. *Function longer lookup functions match.fun. result, passing functions via string function name stopped working. qassert using f first char rule now specifies factor (: function).","code":""},{"path":"https://mllg.github.io/checkmate/news/index.html","id":"version-180","dir":"Changelog","previous_headings":"","what":"Version 1.8.0","title":"Version 1.8.0","text":"CRAN release: 2016-06-06 functions now support handling default arguments encoded NULL via argument null.ok. Functions *File *Directory deprecated due name clashes removed future version. Please use *FileExists *DirectoryExists instead. New helper function matchArg provide simple easy way partial argument matching combination AssertCollection. Added alias functions check functions (check_*) provide support underscore programming style assert().","code":""},{"path":"https://mllg.github.io/checkmate/news/index.html","id":"version-174","dir":"Changelog","previous_headings":"","what":"Version 1.7.4","title":"Version 1.7.4","text":"CRAN release: 2016-04-08 Compatibility upcoming testthat version. expect_ functions now return checked object invisibly. Changed default argument .var.name assertions label expectations: now default return value exported function vname (instead missing confuses linters). Fixed error message convert functions: Variable name properly looked heuristic. Fixed bug qassertr qtestr error message properly generated multiple rules provided. New argument depth qtestr control recursion depth checking nested lists.","code":""},{"path":"https://mllg.github.io/checkmate/news/index.html","id":"version-173","dir":"Changelog","previous_headings":"","what":"Version 1.7.3","title":"Version 1.7.3","text":"CRAN release: 2016-03-10 Added checkDate. Argument .var.name assert functions now  default value (instead missing). Fixed bug *OS functions. Fixed bug *Directory functions. New argument extension *File family functions.","code":""},{"path":"https://mllg.github.io/checkmate/news/index.html","id":"version-172","dir":"Changelog","previous_headings":"","what":"Version 1.7.2","title":"Version 1.7.2","text":"CRAN release: 2016-02-25 Added checkOS(). Argument fixed *Character functions now accepts string instead boolean value thus can directly used substring search. New arguments min.chars, pattern, fixed ignore.case *String family functions. Exported helper functions wf (.first) wl (.last). Now importing new backports package functions lengths() dir.exists.","code":""},{"path":"https://mllg.github.io/checkmate/news/index.html","id":"version-171","dir":"Changelog","previous_headings":"","what":"Version 1.7.1","title":"Version 1.7.1","text":"CRAN release: 2016-02-02 Fixed segfault checking upper bound qassert/qtest. minor speedups","code":""},{"path":"https://mllg.github.io/checkmate/news/index.html","id":"version-170","dir":"Changelog","previous_headings":"","what":"Version 1.7.0","title":"Version 1.7.0","text":"CRAN release: 2016-01-23 Added alias functions functions support underscore style, e.g. assert_numeric new alias assertNumeric test_matrix alias test_matrix. assert functions now invisibly return tested object instead TRUE thus can used magrittr pipes. Improved speed functions reducing .Call overhead (Thanks Hadley Wickham). Added *DataTable functions properly test primary secondary keys data tables. Removed *Percentage family functions. Exported functions makeAssertion, makeTest makeExpectation assist expanding package user-generated checks. Added functions makeAssertionFunction, makeTestFunction makeExpectationFunction automatically create respective functions based provided check function.","code":""},{"path":"https://mllg.github.io/checkmate/news/index.html","id":"version-163","dir":"Changelog","previous_headings":"","what":"Version 1.6.3","title":"Version 1.6.3","text":"CRAN release: 2015-10-23 Assertions can now collected (via makeAssertCollection()) reported (via reportAssertions()). qassert() can now perform bound checks strings. default parameter “ordered” *SetEqual functions now set FALSE, described documentation.","code":""},{"path":"https://mllg.github.io/checkmate/news/index.html","id":"version-162","dir":"Changelog","previous_headings":"","what":"Version 1.6.2","title":"Version 1.6.2","text":"CRAN release: 2015-07-26 Fixed compile-time warning. checkmate import testthat anymore order speed package loading times keep dependencies minimum. expect_* family functions can still used, namespace loaded demand.","code":""},{"path":"https://mllg.github.io/checkmate/news/index.html","id":"version-161","dir":"Changelog","previous_headings":"","what":"Version 1.6.1","title":"Version 1.6.1","text":"CRAN release: 2015-07-17 New family functions: expect_* intended used combination testthat. note functions expect_null() expect_named() provided avoid name clashes testthat. Added qexpect() qexpectr(). Added argument .missing checks matricies data frames. Added anyNaN(). Clarified documentation assert() allMissing(). Fixed bug bound checks performed missing values. Fixed bug missingness correctly detected data frames.","code":""},{"path":"https://mllg.github.io/checkmate/news/index.html","id":"version-160","dir":"Changelog","previous_headings":"","what":"Version 1.6.0","title":"Version 1.6.0","text":"CRAN release: 2015-06-19 Started support long vectors. Added short vignette. Improved documentation. New argument “combine” assert() allow combining check functions instead .","code":""},{"path":"https://mllg.github.io/checkmate/news/index.html","id":"version-153","dir":"Changelog","previous_headings":"","what":"Version 1.5.3","title":"Version 1.5.3","text":"CRAN release: 2015-05-13 Fixed bug regarding number rows zero-column data frames. Fixed bug type lists dimension attribute reported “array” “matrix”. Family *Array: new arguments “min.d” “max.d”. Family Array Matrix: Argument “mode” now additionally accepts strings “list” “atomic”.","code":""},{"path":"https://mllg.github.io/checkmate/news/index.html","id":"version-152","dir":"Changelog","previous_headings":"","what":"Version 1.5.2","title":"Version 1.5.2","text":"CRAN release: 2015-03-20 Fixed: (assert|check|test)Character(NA_character_, min.chars = 1) eval TRUE anymore. New arguments *Factor functions: (n|min|max).levels. Improved error messages type length checks. Improved error messages missing arguments.","code":""},{"path":"https://mllg.github.io/checkmate/news/index.html","id":"version-151","dir":"Changelog","previous_headings":"","what":"Version 1.5.1","title":"Version 1.5.1","text":"CRAN release: 2014-12-14 Included workaround R’s nrow ncol properly work data frames. Fixed bug handling complex number checks integerish values. Improved documentation.","code":""},{"path":"https://mllg.github.io/checkmate/news/index.html","id":"version-150","dir":"Changelog","previous_headings":"","what":"Version 1.5.0","title":"Version 1.5.0","text":"CRAN release: 2014-10-19 Added checkNames(). Added checkPercentage(). Added anyInfinite(). Fixed error messages dimension checks. Fixed error checking numerics finiteness.","code":""},{"path":"https://mllg.github.io/checkmate/news/index.html","id":"version-14","dir":"Changelog","previous_headings":"","what":"Version 1.4","title":"Version 1.4","text":"CRAN release: 2014-09-03 Fixed bug rownames colnames data.frames retrieved correctly. Fixed bug checkVector() (wrong order arguments call C). Filesystem access: checks write executable rights now disabled windows.","code":""},{"path":"https://mllg.github.io/checkmate/news/index.html","id":"version-13","dir":"Changelog","previous_headings":"","what":"Version 1.3","title":"Version 1.3","text":"CRAN release: 2014-08-15 Fixed bug logical values passed check numerics qassert. Family *SetEqual: new argument “ordered”. checkPathForOutput: new argument “overwrite”.","code":""},{"path":"https://mllg.github.io/checkmate/news/index.html","id":"version-12","dir":"Changelog","previous_headings":"","what":"Version 1.2","title":"Version 1.2","text":"CRAN release: 2014-07-21 Fixed bug checkList. Fixed dimnames check empty matrices data frames. Added *SetEqual functions.","code":""},{"path":"https://mllg.github.io/checkmate/news/index.html","id":"version-11","dir":"Changelog","previous_headings":"","what":"Version 1.1","title":"Version 1.1","text":"CRAN release: 2014-06-28 Improved error messages assert* functions. New argument ‘empty.ok’ *Subset functions. assert() now returns TRUE invisibly (documented). Fixed handling zero-length arguments checkFunction(). Fixed error message duplicated values found. Fixed missing check row names checkMatrix checkDataFrame.","code":""},{"path":"https://mllg.github.io/checkmate/news/index.html","id":"version-10","dir":"Changelog","previous_headings":"","what":"Version 1.0","title":"Version 1.0","text":"CRAN release: 2014-06-17 Initial release CRAN.","code":""}]
