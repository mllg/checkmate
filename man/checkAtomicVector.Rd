% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/checkAtomicVector.R
\name{checkAtomicVector}
\alias{checkAtomicVector}
\alias{check_atomic_vector}
\alias{assertAtomicVector}
\alias{assert_atomic_vector}
\alias{testAtomicVector}
\alias{test_atomic_vector}
\alias{expect_atomic_vector}
\title{Check that an argument is an atomic vector}
\usage{
checkAtomicVector(
  x,
  any.missing = TRUE,
  all.missing = TRUE,
  len = NULL,
  min.len = NULL,
  max.len = NULL,
  unique = FALSE,
  names = NULL
)

check_atomic_vector(
  x,
  any.missing = TRUE,
  all.missing = TRUE,
  len = NULL,
  min.len = NULL,
  max.len = NULL,
  unique = FALSE,
  names = NULL
)

assertAtomicVector(
  x,
  any.missing = TRUE,
  all.missing = TRUE,
  len = NULL,
  min.len = NULL,
  max.len = NULL,
  unique = FALSE,
  names = NULL,
  .var.name = vname(x),
  add = NULL
)

assert_atomic_vector(
  x,
  any.missing = TRUE,
  all.missing = TRUE,
  len = NULL,
  min.len = NULL,
  max.len = NULL,
  unique = FALSE,
  names = NULL,
  .var.name = vname(x),
  add = NULL
)

testAtomicVector(
  x,
  any.missing = TRUE,
  all.missing = TRUE,
  len = NULL,
  min.len = NULL,
  max.len = NULL,
  unique = FALSE,
  names = NULL
)

test_atomic_vector(
  x,
  any.missing = TRUE,
  all.missing = TRUE,
  len = NULL,
  min.len = NULL,
  max.len = NULL,
  unique = FALSE,
  names = NULL
)

expect_atomic_vector(
  x,
  any.missing = TRUE,
  all.missing = TRUE,
  len = NULL,
  min.len = NULL,
  max.len = NULL,
  unique = FALSE,
  names = NULL,
  info = NULL,
  label = vname(x)
)
}
\arguments{
\item{x}{[any]\cr
Object to check.}

\item{any.missing}{[\code{logical(1)}]\cr
Are vectors with missing values allowed? Default is \code{TRUE}.}

\item{all.missing}{[\code{logical(1)}]\cr
Are vectors with only missing values allowed? Default is \code{TRUE}.}

\item{len}{[\code{integer(1)}]\cr
Exact expected length of \code{x}.}

\item{min.len}{[\code{integer(1)}]\cr
Minimal length of \code{x}.}

\item{max.len}{[\code{integer(1)}]\cr
Maximal length of \code{x}.}

\item{unique}{[\code{logical(1)}]\cr
Must all values be unique? Default is \code{FALSE}.}

\item{names}{[\code{character(1)}]\cr
Check for names. See \code{\link{checkNamed}} for possible values.
Default is \dQuote{any} which performs no check at all.}

\item{.var.name}{[\code{character(1)}]\cr
Name of the checked object to print in assertions. Defaults to
the heuristic implemented in \code{\link{vname}}.}

\item{add}{[\code{AssertCollection}]\cr
Collection to store assertion messages. See \code{\link{AssertCollection}}.}

\item{info}{[character(1)]\cr
Extra information to be included in the message for the testthat reporter.
See \code{\link[testthat]{expect_that}}.}

\item{label}{[\code{character(1)}]\cr
Name of the checked object to print in messages. Defaults to
the heuristic implemented in \code{\link{vname}}.}
}
\value{
Depending on the function prefix:
 If the check is successful, the functions 
 \code{assertAtomicVector}/\code{assert_atomic_vector} return 
 \code{x} invisibly, whereas
 \code{checkAtomicVector}/\code{check_atomic_vector} and 
 \code{testAtomicVector}/\code{test_atomic_vector} return 
 \code{TRUE}.
 If the check is not successful, 
 \code{assertAtomicVector}/\code{assert_atomic_vector}
 throws an error message, 
 \code{testAtomicVector}/\code{test_atomic_vector}
 returns \code{FALSE},
 and \code{checkAtomicVector} returns a string with the error message.
 The function \code{expect_atomic_vector} always returns an
 \code{\link[testthat]{expectation}}.
}
\description{
An atomic vector is defined slightly different from specifications in
\code{\link[base]{is.atomic}} and \code{\link[base]{is.vector}}:
An atomic vector is either \code{logical}, \code{integer}, \code{numeric},
\code{complex}, \code{character} or \code{raw} and can have any attributes except a
dimension attribute (like matrices).
I.e., a \code{factor} is an atomic vector, but a matrix or \code{NULL} are not.
In short, this is basically equivalent to \code{is.atomic(x) && !is.null(x) && is.null(dim(x))}.
}
\examples{
testAtomicVector(letters, min.len = 1L, any.missing = FALSE)
}
\seealso{
Other basetypes: 
\code{\link{checkArray}()},
\code{\link{checkAtomic}()},
\code{\link{checkCharacter}()},
\code{\link{checkComplex}()},
\code{\link{checkDataFrame}()},
\code{\link{checkDate}()},
\code{\link{checkDouble}()},
\code{\link{checkEnvironment}()},
\code{\link{checkFactor}()},
\code{\link{checkFormula}()},
\code{\link{checkFunction}()},
\code{\link{checkIntegerish}()},
\code{\link{checkInteger}()},
\code{\link{checkList}()},
\code{\link{checkLogical}()},
\code{\link{checkMatrix}()},
\code{\link{checkNull}()},
\code{\link{checkNumeric}()},
\code{\link{checkPOSIXct}()},
\code{\link{checkRaw}()},
\code{\link{checkVector}()}

Other atomicvector: 
\code{\link{checkAtomic}()},
\code{\link{checkVector}()}
}
\concept{atomicvector}
\concept{basetypes}
